[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "S2S Lab 3",
    "section": "",
    "text": "Welcome to the third S2S lab. This lab builds on what we already know about data frames and will teach you how to save data files of different types in RStudio and then manipulate them in several ways, such as creating new variables, working with a subset of a larger data frame or merging together data from different sources. Working with data is a key skill throughout statistics and it will often be saved as a data frame, so it is important to know all the things that can be done with them.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome!</span>"
    ]
  },
  {
    "objectID": "01-reading.html",
    "href": "01-reading.html",
    "title": "2  Reading in Data",
    "section": "",
    "text": "2.1 Setting your working directory\nBefore we can start reading in any data sets, we need to know about working directories in R. This is essentially a folder where you will save any data sets or R files that you tell R to automatically look within whenever you want to read in any data.\nFrom now on, we recommend that you create a folder for each S2S lab on your own device, where you can save the R script of code you write, as well as any files containing data that you use in the lab. For example, create a folder called “S2S Lab 3” for this lab, somewhere where you can find it again (if you are using a lab PC, then save these folders in your M: Drive - this ensures you can access them again from any PC across the university).\nNow you can download the data files on Moodle and save them in this folder (make sure to keep them named as they are).\nOnce you have a folder created, you can tell R to automatically look within that folder whenever you want to open or load in specific files. To do this, within RStudio, click on:\nThis will open a pop-up window where you can navigate to the folder you just created for this lab. Select this folder and click ‘Open’ to set the working directory. Now the data sets that are saved in the folder you set as the working directory will appear in the Files tab in RStudio. Any other files saved in this folder will also appear here.\nTo learn more about how to set a working directory within RStudio, refer to Section 1.7 RStudio of Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading in Data</span>"
    ]
  },
  {
    "objectID": "01-reading.html#directory",
    "href": "01-reading.html#directory",
    "title": "2  Reading in Data",
    "section": "",
    "text": "‘Session’ in the menu bar along the top of the RStudio window\n‘Set Working Directory’\n‘Choose Directory…’",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading in Data</span>"
    ]
  },
  {
    "objectID": "01-reading.html#read.table",
    "href": "01-reading.html#read.table",
    "title": "2  Reading in Data",
    "section": "2.2 read.table()",
    "text": "2.2 read.table()\nA common format for data to be saved in is something called ‘table format’. These are files with the extension ‘.txt’. We use the function read.table() to read these file types into R. read.table() takes (amongst others) the following arguments:\n\nfile =: this is the location of the ‘.txt’ file you wish to read in. If you have set the working directory to where this file is stored, you only need to include the full name of the file in quotation marks, \" \".\nheader =: this takes the values TRUE or FALSE which indicate whether the original ‘.txt’ file contains column names as its first row. By default, this is set to FALSE, so column names will not be included.\nsep =: this shows the ‘field separator character’ which shows how each element in the ‘.txt’ file are separated. Common values for this argument include \"\" if elements are separated by spaces, or \"\\t\" if elements are separated by tab spaces. By default, this is set to \"\".\nna.strings =: this shows the characters which are used to denote missing values in the ‘.txt’ file. By default this takes the value NA, but other ways missing values could be shown in the file might include \"?\", \".\" or \"*\" for example.\ndec =: this is the character used in the ‘.txt’ file to denote a decimal point. It is most common that this will be \".\", and this is the default value, however some files may use a comma, \",\" as a decimal point so watch out for this!\n\nThe only necessary argument in read.table() is file =, however it is always worth checking the format of the original ‘.txt’ file so that you read it into R correctly.\nFor example, “chol.txt” is shown in Figure Figure 2.1. This is a data set from an observational experiment measuring the cholesterol levels of patients and their smoking status. The variables included are:\n\n\"id\": a unique code identifying each patient in the experiment.\n\"ldl\": a measure of each patient’s low-density lipoprotein (LDL) cholesterol level.\n\"hdl\": a measure of each patient’s high-density lipoprotein (HDL) cholesterol level.\n\"trig\": a measure of the triglycerides levels in each patient’s blood.\n\"age\": the patient’s age in years.\n\"gender\": the patient’s gender (female or male).\n\"smoke\": whether a patient is a current-smoker, ex-smoker, or non-smoker.\n\nWe can see in Figure 2.1 that “chol.txt” does include column names (i.e header = TRUE) and that each element of the data set is separated with a space (i.e. sep = \"\"). The missing values in “chol.txt” are already represented by NA (i.e. the symbol for missing values in R), so we don’t need to include na.strings =.\n\n\n\n\n\n\n\n\nFigure 2.1: Screenshot of chol.txt file\n\n\n\n\n\nIn order to read the file chol.txt into R we can use the following code.\n\nR Code\n\n\n\nchol &lt;- read.table(file = \"chol.txt\", header = TRUE)\n\n\n\n\nNote that we have left out sep = \"\" because this is the default value of the argument so it is not required to type it in the function read.table().\nIt is good practise to compare the object you’ve just saved in the Environment tab with the contents of the original data file to make sure everything is as you expect. This will highlight any discrepancies and allow you to check whether additional arguments are required to fix them e.g. na.strings = or header =.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading in Data</span>"
    ]
  },
  {
    "objectID": "01-reading.html#read.csv",
    "href": "01-reading.html#read.csv",
    "title": "2  Reading in Data",
    "section": "2.3 read.csv()",
    "text": "2.3 read.csv()\nAnother common file type that data may be stored in are ‘.csv’ files. If data has been input into Microsoft Excel, it will often be exported as a ‘.csv’ file, so we see these a lot. In order to read ‘.csv’ files into R, we use the function read.csv(). This takes very similar arguments to read.table(), including:\n\nfile =: this is the full name of the ‘.csv’ file in quotation marks, provided it is saved in the folder you have set as your working directory.\nheader =: by default this takes the value TRUE, so column names are automatically included for ‘.csv’ files.\nsep =: the default separator character is sep = \",\".\nna.strings =: the default for denoting missing values in the original ‘.csv’ file is set to \"NA\".\ndec =: the default decimal point is set to \".\".\n\nAgain, the only necessary argument in read.csv() is file =.\n\n\nTask\n\n\nRead the file “edu.csv” into R and save it as a data frame called education.\nThis is a data set containing information on the total numbers of pupils and teachers in schools of different education levels in Scotland. The variables included are:\n\n\"year\": the year measurements were taken in (2016-2022).\n\"level\": the level of education measurements were taken from (“ELC”, “Primary” or “Secondary”).\n\"schools\": the total number of schools across Scotland in the given year/level combination.\n\"teachers\": the total number of teachers employed in all the schools in the given year/level combination.\n\"pupils\": the total number of pupils attending all the schools in the given year/level combination.\n\n\n\n\n\nThe use of the functions read.table() and read.csv() is detailed in Section 1.10.1 Using read.table() of Probability and Statistics with R.\nThere are several other file types that data can be stored in, and numerous ways to read data sets into R. If you are curious about other ways to do this, refer to 1.10 Reading and Saving Data in R in Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading in Data</span>"
    ]
  },
  {
    "objectID": "02-data.html",
    "href": "02-data.html",
    "title": "3  Working With Data",
    "section": "",
    "text": "3.1 Checking variable types\nOnce a data frame has been read into R, it is always a good idea to examine its contents using the str() function to see the structure of the data object. We have already seen the str() function in Lab 2 but as a reminder, it shows us the type of vector each column in a data frame is saved as.\nRunning the following code tells us that the four variables ldl, hdl, trig and age are all integer vectors and that id, gender and smoke are character vectors.\nBecause gender only takes the values \"female\" or \"male\" in this case, and smoke is categorised into three levels, \"no\", \"ex-smoker\" and \"current\", it makes sense to treat both these variables as factors instead of character vectors.\nWe can use what we learned in Lab 2 to change these variables into factors.\nNow using str() to check the type of vector each column is saved as shows us that gender and smoke are both now factors.\nRefer to Section 1.11 Working with Data of Probability and Statistics with R to learn more about checking the setup of a data set.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "02-data.html#sec-checking",
    "href": "02-data.html#sec-checking",
    "title": "3  Working With Data",
    "section": "",
    "text": "R CodeOutput\n\n\n\nstr(chol)\n\n\n\n\n\n'data.frame':   13 obs. of  7 variables:\n $ id    : chr  \"P912\" \"P215\" \"P063\" \"P117\" ...\n $ ldl   : int  175 196 139 162 140 147 82 165 149 95 ...\n $ hdl   : int  25 36 65 37 117 51 81 63 49 54 ...\n $ trig  : int  148 92 NA 139 59 126 NA 120 NA 157 ...\n $ age   : int  39 32 42 30 42 65 57 48 32 55 ...\n $ gender: chr  \"female\" \"female\" \"male\" \"female\" ...\n $ smoke : chr  \"no\" \"no\" NA \"ex-smoker\" ...\n\n\n\n\n\n\n\n\nR Code\n\n\n\nchol$gender &lt;- factor(x = chol$gender, levels = c(\"female\", \"male\"))\nchol$smoke &lt;- factor(x = chol$smoke, levels = c(\"no\", \"ex-smoker\", \"current\"))\n\n\n\n\n\n\nR CodeOutput\n\n\n\nstr(chol)\n\n\n\n\n\n'data.frame':   13 obs. of  7 variables:\n $ id    : chr  \"P912\" \"P215\" \"P063\" \"P117\" ...\n $ ldl   : int  175 196 139 162 140 147 82 165 149 95 ...\n $ hdl   : int  25 36 65 37 117 51 81 63 49 54 ...\n $ trig  : int  148 92 NA 139 59 126 NA 120 NA 157 ...\n $ age   : int  39 32 42 30 42 65 57 48 32 55 ...\n $ gender: Factor w/ 2 levels \"female\",\"male\": 1 1 2 1 1 1 2 2 1 1 ...\n $ smoke : Factor w/ 3 levels \"no\",\"ex-smoker\",..: 1 1 NA 2 2 2 1 3 1 2 ...\n\n\n\n\n\n\n\nTask\n\n\nWhat type of variable is schools saved as in the education data frame? \n\n\n\n\nTask\n\n\nComplete the code to change the variables year and level in education to be factor variables.\n\nR Code\n\n\n\neducation$year &lt;-data.framefactormatrix(x =,\n\nlevels =)\n\n\n\neducation$level &lt;-data.framefactormatrix(x =,\n\nlevels = c())",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "02-data.html#dealing-with-na-values",
    "href": "02-data.html#dealing-with-na-values",
    "title": "3  Working With Data",
    "section": "3.2 Dealing with NA values",
    "text": "3.2 Dealing with NA values\nData sets will often have missing values for a variety of different reasons; maybe because of human error, maybe because information was not disclosed or maybe because of a failed experiment for example. When data is correctly read into R these unknown values will be denoted by NA. In order to conduct analysis or perform calculations on your data, you may wish to remove these missing values from your data set. Always think about whether this is an appropriate thing to do.\nOne way in which we can remove missing values from a data set is to use the function na.omit(). This will return the data frame with any ‘incomplete cases’ removed. That is, any rows that have NA as the value for any variable will be removed from the data frame.\nLooking at chol, we can see that there are missing values in rows 3, 7 and 9.\n\nR CodeOutput\n\n\n\nchol\n\n\n\n\n\n        id ldl hdl trig age gender     smoke\n1   1 P912 175  25  148  39 female        no\n2   2 P215 196  36   92  32 female        no\n3   3 P063 139  65   NA  42   male      &lt;NA&gt;\n4   4 P117 162  37  139  30 female ex-smoker\n5   5 P613 140 117   59  42 female ex-smoker\n6   6 P332 147  51  126  65 female ex-smoker\n7   7 P951  82  81   NA  57   male        no\n8   8 P004 165  63  120  48   male   current\n9   9 P725 149  49   NA  32 female        no\n10 10 P901  95  54  157  55 female ex-smoker\n11 11 P103 169  59   67  48 female        no\n12 12 P843 174 117  168  41 female        no\n13 13 P753  91  52  146  69 female   current\n\n\n\n\n\nIf we run the following code, then these rows are removed from the data frame and we are left with only the ‘complete cases’.\n\nR CodeOutput\n\n\n\nna.omit(chol)\n\n\n\n\n\n     id ldl hdl trig age gender     smoke\n1  P912 175  25  148  39 female        no\n2  P215 196  36   92  32 female        no\n4  P117 162  37  139  30 female ex-smoker\n5  P613 140 117   59  42 female ex-smoker\n6  P332 147  51  126  65 female ex-smoker\n8  P004 165  63  120  48   male   current\n10 P901  95  54  157  55 female ex-smoker\n11 P103 169  59   67  48 female        no\n12 P843 174 117  168  41 female        no\n13 P753  91  52  146  69 female   current\n\n\n\n\n\nNote that na.omit() preserves the original row labels. This means that there are no rows labelled 3, 7 or 9 in the resulting data frame because they have been completely removed.\ncomplete.cases() is another useful function that can be used to remove rows that have NA values. This returns a logical vector, the same length as the number of rows of the data frame, that indicates whether a row contains any NA values (FALSE), or whether it is ‘complete’ (TRUE).\n\nR CodeOutput\n\n\n\ncomplete.cases(chol)\n\n\n\n\n\n [1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE\n[13]  TRUE\n\n\n\n\n\nAgain we can see that the rows with missing values in chol are rows 3, 7 and 9 (since the third, seventh and ninth values in the output above are all FALSE). We can then use this logical vector to extract the rows which are complete from chol.\n\nR CodeOutput\n\n\n\nchol[complete.cases(chol), ]\n\n\n\n\n\n     id ldl hdl trig age gender     smoke\n1  P912 175  25  148  39 female        no\n2  P215 196  36   92  32 female        no\n4  P117 162  37  139  30 female ex-smoker\n5  P613 140 117   59  42 female ex-smoker\n6  P332 147  51  126  65 female ex-smoker\n8  P004 165  63  120  48   male   current\n10 P901  95  54  157  55 female ex-smoker\n11 P103 169  59   67  48 female        no\n12 P843 174 117  168  41 female        no\n13 P753  91  52  146  69 female   current\n\n\n\n\n\nHere, using na.omit() and complete.cases() have returned the same output.\n\n\nTask\n\n\nWhich rows in education have missing values? \n\n\n\n\nTask\n\n\nWrite code to remove all rows in education which contain NA values.\n\nR Code\n\n\n\n\n\n\n\n\n\n\n\nIn the case where we only want to know which entries of a vector or specific variable in a data frame are NA, we can use the function is.na(). For example, if missing values in the trig variable were not of concern but we wanted to identify missing values in the smoke column, we could use the following code.\n\nR CodeOutput\n\n\n\nis.na(chol$smoke)\n\n\n\n\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE\n\n\n\n\n\nWe can see that only the third row has the value NA for smoke, since the third element in the output from is.na() above is TRUE. In order to remove the row where smoke has a missing value, we can use the following code to index the chol data frame.\n\nR CodeOutput\n\n\n\nchol[!is.na(chol$smoke), ]\n\n\n\n\n\n     id ldl hdl trig age gender     smoke\n1  P912 175  25  148  39 female        no\n2  P215 196  36   92  32 female        no\n4  P117 162  37  139  30 female ex-smoker\n5  P613 140 117   59  42 female ex-smoker\n6  P332 147  51  126  65 female ex-smoker\n7  P951  82  81   NA  57   male        no\n8  P004 165  63  120  48   male   current\n9  P725 149  49   NA  32 female        no\n10 P901  95  54  157  55 female ex-smoker\n11 P103 169  59   67  48 female        no\n12 P843 174 117  168  41 female        no\n13 P753  91  52  146  69 female   current\n\n\n\n\n\nNote that we use ! in front of is.na() so that the logical vector returned has the value TRUE when values are complete and FALSE when values are missing i.e. NA.\n\nYou can look at further examples of dealing with missing data in Section 1.11.1 Dealing with NA Values of Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "02-data.html#sorting-data-frames",
    "href": "02-data.html#sorting-data-frames",
    "title": "3  Working With Data",
    "section": "3.3 Sorting data frames",
    "text": "3.3 Sorting data frames\nWhen investigating your data sets, you may want to order the values of a particular variable in increasing or decreasing order. This is easily done using the sort() function.\nFor example, we can view the ages of all subjects in chol, in increasing order, using the code below.\n\nR CodeOutput\n\n\n\nsort(chol$age)\n\n\n\n\n\n [1] 30 32 32 39 41 42 42 48 48 55 57 65 69\n\n\n\n\n\nNote that if we wanted to view these ages in decreasing order, we would add the argument decreasing = TRUE to the sort() function.\n\n\nTask\n\n\nWhat is the largest value for pupils from the education data frame? \n\n\nThe downside of using sort() is that we can only see the values from one variable of a data frame. If instead we wanted to order all subjects in chol from the youngest to the oldest and still see the values of all the other variables, we can use the function order().\norder() will return a vector showing which row has the smallest value, then the second smallest value and so on. For example, the following code shows us that the fourth subject in chol is the youngest and the thirteenth subject is the eldest.\n\nR CodeOutput\n\n\n\norder(chol$age)\n\n\n\n\n\n [1]  4  2  9  1 12  3  5  8 11 10  7  6 13\n\n\n\n\n\nWe can then use this vector to index the full data frame chol and see all the variables for each subject at once.\n\nR CodeOutput\n\n\n\nchol[order(chol$age), ]\n\n\n\n\n\n     id ldl hdl trig age gender     smoke\n4  P117 162  37  139  30 female ex-smoker\n2  P215 196  36   92  32 female        no\n9  P725 149  49   NA  32 female        no\n1  P912 175  25  148  39 female        no\n12 P843 174 117  168  41 female        no\n3  P063 139  65   NA  42   male      &lt;NA&gt;\n5  P613 140 117   59  42 female ex-smoker\n8  P004 165  63  120  48   male   current\n11 P103 169  59   67  48 female        no\n10 P901  95  54  157  55 female ex-smoker\n7  P951  82  81   NA  57   male        no\n6  P332 147  51  126  65 female ex-smoker\n13 P753  91  52  146  69 female   current\n\n\n\n\n\nIn the output above, note that there are multiple subjects aged 32, 42 and 48. After ordering by age, R automatically shows these subjects with the same age in order of increasing row number. We could however add a second or third argument to order() to order the rows by another variable in the case where there are repeated values of the first variable.\nFor example, the following code orders all the subjects in chol by age first, and then for any subjects that are the same age, they will then be sorted in order of increasing ldl.\n\nR CodeOutput\n\n\n\nchol[order(chol$age, chol$ldl), ]\n\n\n\n\n\n     id ldl hdl trig age gender     smoke\n4  P117 162  37  139  30 female ex-smoker\n9  P725 149  49   NA  32 female        no\n2  P215 196  36   92  32 female        no\n1  P912 175  25  148  39 female        no\n12 P843 174 117  168  41 female        no\n3  P063 139  65   NA  42   male      &lt;NA&gt;\n5  P613 140 117   59  42 female ex-smoker\n8  P004 165  63  120  48   male   current\n11 P103 169  59   67  48 female        no\n10 P901  95  54  157  55 female ex-smoker\n7  P951  82  81   NA  57   male        no\n6  P332 147  51  126  65 female ex-smoker\n13 P753  91  52  146  69 female   current\n\n\n\n\n\n\n\nTask\n\n\nComplete the code to sort the observations from education in decreasing order of the number of pupils.\n\nR Code\n\n\n\neducation[sortorder(, decreasing =, ]\n\n\n\n\n\n\n\n\nLook at Section 1.11.3 Sorting a Data Frame by One or More of Its Columns of Probability and Statistics with R to learn more about sorting and ordering data sets.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "02-data.html#subsetting",
    "href": "02-data.html#subsetting",
    "title": "3  Working With Data",
    "section": "3.4 Subsetting",
    "text": "3.4 Subsetting\nWhen we want to only view particular elements of a data frame, this is known as subsetting the data. This is useful if you’re dealing with extremely large data sets and only want to analyse female subjects, or subjects who are all from the same country for example. Subsetting the data means that you would extract only these subjects that you are actually interested in.\nA useful function for extracting elements of a data frame is the function subset() (which we first saw in Lab 1). This allows us to extract the elements of a data frame which meet particular conditions. The arguments that subset() takes are:\n\nx =: this is the data frame that we want to extract particular elements from.\nsubset =: this is a logical statement which determines the elements to keep in the subsetted data frame.\nselect =: this shows the column or columns from the data frame which the logical statement should be applied to.\n\nFor example, if we wanted to view the subjects in chol who have an LDL of greater than 170, then we can use the following code.\n\nR CodeOutput\n\n\n\nsubset(x = chol, subset = ldl &gt; 170, select = ldl)\n\n\n\n\n\n   ldl\n1  175\n2  196\n12 174\n\n\n\n\n\nThis shows us that there are three patients with LDL greater than 170 (subset = ldl &gt; 170) and we can also see the values of LDL for these patients (select = ldl).\nIf we wanted to see the values of the other variables in the data frame for only those patients with LDL greater than 170, then we can simply leave out the select = argument.\n\nR CodeOutput\n\n\n\nsubset(x = chol, subset = ldl &gt; 170)\n\n\n\n\n\n     id ldl hdl trig age gender smoke\n1  P912 175  25  148  39 female    no\n2  P215 196  36   92  32 female    no\n12 P843 174 117  168  41 female    no\n\n\n\n\n\nNote that it is also possible to subset a data frame using logical statements within square brackets, [ ]. We could return the same output as above by indexing the chol using the following code.\n\nR CodeOutput\n\n\n\nchol[chol$ldl &gt; 170, ]\n\n\n\n\n\n     id ldl hdl trig age gender smoke\n1  P912 175  25  148  39 female    no\n2  P215 196  36   92  32 female    no\n12 P843 174 117  168  41 female    no\n\n\n\n\n\n\n\nTask\n\n\nWrite some code to subset education to show the number of schools that have a collective total of more than 310,000 pupils in the years 2020, 2021 or 2022.\n\n\n\n\nYou can read more about subsetting data frames in Section 1.12 Using Logical Operators with Data Frames in Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "02-data.html#summarising-data",
    "href": "02-data.html#summarising-data",
    "title": "3  Working With Data",
    "section": "3.5 Summarising data",
    "text": "3.5 Summarising data\nData sets will often contain a lot of information which is not easy to interpret at a glance. It is therefore useful to be able to summarise the data they contain, in appropriate ways for each different type of variable.\nOne of the simplest functions to help summarise a data frame is the summary() function.\n\nR CodeOutput\n\n\n\nsummary(chol)\n\n\n\n\n\n      id                 ldl             hdl           trig      \n Length:13          Min.   : 82.0   Min.   : 25   Min.   : 59.0  \n Class :character   1st Qu.:139.0   1st Qu.: 49   1st Qu.: 99.0  \n Mode  :character   Median :149.0   Median : 54   Median :132.5  \n                    Mean   :144.9   Mean   : 62   Mean   :122.2  \n                    3rd Qu.:169.0   3rd Qu.: 65   3rd Qu.:147.5  \n                    Max.   :196.0   Max.   :117   Max.   :168.0  \n                                                  NA's   :3      \n      age           gender         smoke  \n Min.   :30.00   female:10   no       :6  \n 1st Qu.:39.00   male  : 3   ex-smoker:4  \n Median :42.00               current  :2  \n Mean   :46.15               NA's     :1  \n 3rd Qu.:55.00                            \n Max.   :69.00                            \n                                          \n\n\n\n\n\nThe output from summary() shows information for each column in the data frame you provide as the argument. For numerical variables, we are shown summary statistics such as the minimum value, the mean or the 3rd quartile. For factor variables, we are shown how many observations there are in each level of the factor. If there are any NA values in a column, the total number of these will also be shown for each variable.\nWhen a data frame contains categorical variables, a neater way to summarise the counts of the different levels is in contingency tables. These show counts of how many times each level of a categorical variable appeared in the data frame. The function to create contingency tables in R is table(). The only argument that table() needs is the factor variable you want to summarise.\nFor example, we can quickly show counts of how many subjects in chol fall into each of the three levels of the smoke variable using the following code.\n\nR CodeOutput\n\n\n\ntable(chol$smoke)\n\n\n\n\n\n\n       no ex-smoker   current \n        6         4         2 \n\n\n\n\n\nIf we wanted to further split these counts by the variable gender, then we simply add this as a second argument to the table() function.\n\nR CodeOutput\n\n\n\nsmoke_counts &lt;- table(chol$smoke, chol$gender)\nsmoke_counts\n\n\n\n\n\n           \n            female male\n  no             5    1\n  ex-smoker      4    0\n  current        1    1\n\n\n\n\n\nWe can easily compute the sums of rows or columns in a table using the function margin.table(). Here we need to provide margin.table() with the following arguments:\n\nx =: this is the table you want to sum over.\nmargin =: this tells R whether you want to sum over rows (set the value to 1), or columns (set the value to 2).\n\nFor example, we can use the table smoke_counts, created above, to count the number of female and male subjects for whom we know their smoking status, using margin.table().\n\nR CodeOutput\n\n\n\nmargin.table(x = smoke_counts, margin = 2)\n\n\n\n\n\n\nfemale   male \n    10      2 \n\n\n\n\n\nAnother useful function to use with tables is prop.table(). This takes the same arguments as margin.table() but shows row or column proportions, rather than sums.\nFor example, to calculate the proportions of current smokers, ex-smokers and non-smokers that are female and male, we can use the following code.\n\nR CodeOutput\n\n\n\nprop.table(x = smoke_counts, margin = 1)\n\n\n\n\n\n           \n               female      male\n  no        0.8333333 0.1666667\n  ex-smoker 1.0000000 0.0000000\n  current   0.5000000 0.5000000\n\n\n\n\n\nSuppose you wanted to calculate summary statistics for one variable in a data frame, but have it split by the levels of a different categorical variable.\nThe function in R which calculates a summary statistic for one numeric variable, split by the levels of a factor is tapply(). The arguments that tapply() can take are as follows:\n\nX =: this is the numeric variable that you want to apply the function calculating some summary statistic to.\nINDEX =: this is a list containing the categorical variable (or variables) you want to split the calculation of the summary statistic across.\nFUN =: this is the name of the function you want to apply to the numeric variable. Examples include mean, median, max, min, mode, sd etc.\n\nIn the case where we are interested in knowing the mean HDL for subjects who were current smokers, subjects who were ex-smokers and subjects who were non-smokers, we can use tapply().\n\nR CodeOutput\n\n\n\ntapply(X = chol$hdl, INDEX = list(chol$smoke), FUN = mean)\n\n\n\n\n\n       no ex-smoker   current \n 61.16667  64.75000  57.50000 \n\n\n\n\n\nWe can see, for example, that the mean HDL for non-smokers is 61.17. \nThe list provided to the INDEX = argument can contain more than one categorical variable. For example, we can calculate the mean HDL of females and males for each level of the smoke variable using the following code.\n\nR CodeOutput\n\n\n\ntapply(X = chol$hdl, INDEX = list(chol$smoke, chol$gender), FUN = mean)\n\n\n\n\n\n          female male\nno         57.20   81\nex-smoker  64.75   NA\ncurrent    52.00   63\n\n\n\n\n\nNow we can see that the mean HDL for females who are non-smokers is 57.20.  The mean HDL for males who are ex-smokers is NA because there are no males included in chol who are ex-smokers.\n\n\nTask\n\n\nWhat is the mean total number of teachers in primary schools across all years? \n\n\n\nTo read more on creating tables and summarising data in R, see Sections 1.13 Tables and 1.14 Summarizing Functions in Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "02-data.html#creating-variables",
    "href": "02-data.html#creating-variables",
    "title": "3  Working With Data",
    "section": "3.6 Creating variables",
    "text": "3.6 Creating variables\nIn the case where we have another vector or data frame that we wish to join to an existing one, we can do this using one of the functions cbind() or rbind().\n\ncbind() combines the vectors or data frames together by making additional columns, whereas\nrbind() combines them by adding the new vector or data frame as additional rows.\n\nLet’s see an example to understand how this works. The file measurements.csv contains information on the heights and weights of all 13 patients in the original chol data frame. We can begin by reading it in to the Environment tab using the following code.\n\nR Code\n\n\n\nmeasurements &lt;- read.csv(file = \"measurements.csv\")\n\n\n\n\nWe can then add measurements to chol as two additional columns and save the resulting data frame as chol_full using the code below.\n\nR CodeOutput\n\n\n\nchol_full &lt;- cbind(chol, measurements)\nhead(chol_full)\n\n\n\n\n\n    id ldl hdl trig age gender     smoke weight height\n1 P912 175  25  148  39 female        no  90.77   1.69\n2 P215 196  36   92  32 female        no  75.06   1.75\n3 P063 139  65   NA  42   male      &lt;NA&gt;  73.99   1.84\n4 P117 162  37  139  30 female ex-smoker  86.25   1.83\n5 P613 140 117   59  42 female ex-smoker  76.95   1.81\n6 P332 147  51  126  65 female ex-smoker  57.66   1.75\n\n\n\n\n\nAnother way to easily create a new variable in a data frame is to use the $ operator. We can simply add the name of the data frame to the left of $ and our new variable name to the right. Then we can set this variable to be any pre-existing vector, or calculate a new vector based on variables from the data frame.\nFor example, if we wanted to create a new variable, bmi, in chol which shows the BMI of each patient, then we can use the following code.\n\nR CodeOutput\n\n\n\nchol_full$bmi &lt;- chol_full$weight/(chol_full$height)^2\nhead(chol_full)\n\n\n\n\n\n    id ldl hdl trig age gender     smoke weight height      bmi\n1 P912 175  25  148  39 female        no  90.77   1.69 31.78110\n2 P215 196  36   92  32 female        no  75.06   1.75 24.50939\n3 P063 139  65   NA  42   male      &lt;NA&gt;  73.99   1.84 21.85432\n4 P117 162  37  139  30 female ex-smoker  86.25   1.83 25.75473\n5 P613 140 117   59  42 female ex-smoker  76.95   1.81 23.48829\n6 P332 147  51  126  65 female ex-smoker  57.66   1.75 18.82776\n\n\n\n\n\n\n\nTask\n\n\nIn the education data frame, create a new variable called ratio which calculates the pupil to teacher ratio in each level of education. That is,\n\\[\\mbox{ratio}=\\textstyle\\frac{\\mbox{puils}}{\\mbox{teachers}}\\] \n\n\nNow suppose that information on a fourteenth subject is known but has not been included in the original chol data frame. This data is shown in Table 3.1 below.\n\n\n\n\nTable 3.1: Cholesterol data for the fourteenth patient.\n\n\n\n\n\n\n\nid\nldl\nhdl\ntrig\nage\ngender\nsmoke\nweight\nheight\n\n\n\n\nP461\n148\n78\n120\n41\nmale\ncurrent\n84.05\n1.79\n\n\n\n\n\n\n\n\n\n\n\nIn this case we can add the new subject as an additional row using the rbind() function.\nFirst, we need to create a data frame containing the information for this subject. In order for us to add this data frame as a row to chol_full, it needs to have the same number of variables. Therefore, we also need to calculate the BMI for this subject and call it bmi. We can do all this with the following code.\n\nR Code\n\n\n\nsubject &lt;- data.frame(id = \"P461\", ldl = 148, hdl = 78, trig = 120, age = 41, \n                      gender = \"male\", smoke = \"current\", weight = 84.05,\n                      height = 1.79)\n\nsubject$bmi &lt;- subject$weight/(subject$height)^2\n\n\n\n\nNow we can add this subject to chol_full using the code below.\n\nR CodeOutput\n\n\n\nchol_full &lt;- rbind(chol_full, subject)\ntail(chol_full)\n\n\n\n\n\n     id ldl hdl trig age gender     smoke weight height      bmi\n9  P725 149  49   NA  32 female        no  65.37   1.67 23.43935\n10 P901  95  54  157  55 female ex-smoker  80.34   1.62 30.61271\n11 P103 169  59   67  48 female        no  74.90   1.61 28.89549\n12 P843 174 117  168  41 female        no  63.78   1.77 20.35813\n13 P753  91  52  146  69 female   current  71.58   1.62 27.27481\n14 P461 148  78  120  41   male   current  84.05   1.79 26.23202\n\n\n\n\n\nNote that tail() is a function very similar to head(), but rather than showing the first 6 rows by default, it shows the last 6.\n\nSections 1.11.2 Creating New Variables in a Data Frame and 1.13 Tables of Probability and Statistics with R describe how to create new variables.\nSee Appendix A to learn how to create a new variable in a data frame by breaking an existing variable into different levels.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working With Data</span>"
    ]
  },
  {
    "objectID": "03-exercises.html",
    "href": "03-exercises.html",
    "title": "4  Further Exercises",
    "section": "",
    "text": "Exercise 1\nThe file “NHSScotland.txt” contains data on the number of patients attending A&E every month in each of the 14 Scottish NHS boards, from 2007 up to 2023. This data set has the following variables:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "03-exercises.html#exercise-1",
    "href": "03-exercises.html#exercise-1",
    "title": "4  Further Exercises",
    "section": "",
    "text": "“Date”: the end of the month that patient numbers are aggregated over.\n“NHSBoard”: the Scottish NHS board the patients are from.\n“TotalAttendances”: the total number of patients attending A&E in a given month and NHS board.\n“Within4Hours”: the number of patients whose wait time was less than 4 hours.\n“Over4Hours”: the number of patients whose wait time was greater than 4 hours.\n“Over8Hours”: the number of patients whose wait time was greater than 8 hours.\n“Over12Hours”: the number of patients whose wait time was greater than 12 hours.\n\n\n\nRead “NHSScotland.txt” into R and save it as a data frame called nhs.\nChange the column “NHSBoard” to be a factor. (Hint: you can see the names of all the Scottish NHS boards using the code unique(nhs$NHSBoard).)\nAdd an additional column to nhs which calculates the percentage of total patients in A&E whose wait time is less than 4 hours. Call this new variable “PercentageWithin4Hours”.\nWhat is the average percentage of patients who had to wait less than 4 hours in each of the 14 Scottish NHS boards? (Hint: think how you can use the tapply() function.)\n\n\nCreate a new data frame, called glasgow, which is a subset of nhs. This data set should only show observations from NHS Greater Glasgow & Clyde, as well as only having the variables “Date”, “TotalAttendances” and “Over4Hours”.\nSort glasgow in order of decreasing number of patients who had to wait more than 4 hours in A&E. When did the greatest number of patients have to wait for longer than 4 hours?\n\nThe file “HBPopulation.csv” contains data relating to the population size (in 2021) of each of the 14 Scottish NHS boards. Read this file into R and save it as a data frame called population.\nAfter reading Appendix B, merge nhs and population so that A&E attendance and the health board population size can be seen in the same data frame.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "04-cut.html",
    "href": "04-cut.html",
    "title": "Appendix A — cut()",
    "section": "",
    "text": "For numeric variables in a data frame, it can sometimes be useful to split the values into intervals and create a new factor with numerical levels. For example, if we wanted to identify high, mid and low levels of hdl in chol_full.\nThe function that can do this in R is cut(). The arguments that cut() takes are:\n\nx =: this is the numeric variable that you want to split into different levels.\nbreaks =: this is the number of levels you want to split the numeric vector into.\ninclude.lowest =: this takes the values TRUE or FALSE, indicating whether the lowest value in the numeric variable should be included in the first level. By default this is set to FALSE so this smallest value is not included.\n\nWe can split hdl into three levels using the following code.\n\nR CodeOutput\n\n\n\ncut(x = chol_full$hdl, breaks = 3, include.lowest = TRUE)\n\n\n\n\n\n [1] [24.9,55.7] [24.9,55.7] (55.7,86.3] [24.9,55.7] (86.3,117]  [24.9,55.7]\n [7] (55.7,86.3] (55.7,86.3] [24.9,55.7] [24.9,55.7] (55.7,86.3] (86.3,117] \n[13] [24.9,55.7] (55.7,86.3]\nLevels: [24.9,55.7] (55.7,86.3] (86.3,117]\n\n\n\n\n\nThis tells us that the lowest level is the range [24.9, 55.7], the middle level is (55.7, 86.3] and the highest level is (86.3, 117]. We can also see which level each row falls into, the first two rows being in the low level for hdl, the third row being in the middle level and so on.\nWe can then add this as a new factor variable, hdl_level, and represent each level with the labels \"low\", \"mid\" and \"high\" using the code below.\n\nR CodeOutput\n\n\n\nchol_full$hdl_level &lt;- factor(cut(x = chol_full$hdl, breaks = 3, include.lowest = TRUE),\n                              labels = c(\"low\", \"mid\", \"high\"))\n\nhead(chol_full)\n\n\n\n\n\n    id ldl hdl trig age gender     smoke weight height      bmi hdl_level\n1 P912 175  25  148  39 female        no  90.77   1.69 31.78110       low\n2 P215 196  36   92  32 female        no  75.06   1.75 24.50939       low\n3 P063 139  65   NA  42   male      &lt;NA&gt;  73.99   1.84 21.85432       mid\n4 P117 162  37  139  30 female ex-smoker  86.25   1.83 25.75473       low\n5 P613 140 117   59  42 female ex-smoker  76.95   1.81 23.48829      high\n6 P332 147  51  126  65 female ex-smoker  57.66   1.75 18.82776       low",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>`cut()`</span>"
    ]
  },
  {
    "objectID": "05-merge.html",
    "href": "05-merge.html",
    "title": "Appendix B — Merging data frames",
    "section": "",
    "text": "Sometimes information relating to the same subjects or observations might be stored in two separate data frames. When this is the case it is easy to combine two data frames using the merge() function. merge() takes the following arguments:\n\nx =: this is the first of the two data frames you want to merge together.\ny =: this is the second of the two data frames you want to merge.\nby.x =: this specifies which column in the first data frame should be used to merge. This is usually an identifying variable such as subjects’ names or ID codes.\nby.y =: this specifies which column in the second data frame should be used to merge.\nall =: this takes values TRUE or FALSE, indicating whether all rows from both data frames should be included.\nall.x =: this takes values TRUE and FALSE, indicating whether extra rows should be created in the second data frame so that all rows in the first data frame are kept.\nall.y =: this takes values TRUE and FALSE, indicating whether extra rows should be created in the first data frame so that all rows in the second data frame are kept.\n\nOnly the arguments x = and y = are required. When any of of the by. = arguments are left out of the function, R will automatically look for columns which share the same name in the two data sets. When any of the all. = arguments are left out, they default to FALSE, so only complete cases are kept in the final merged data frame.\nThe file treatment.csv contains information on whether patients in a study testing a new treatment for high cholesterol were given the new drug or a placebo drug with no effect. Some of the patients in this new study are subjects from the chol data frame. We can read in the file treatment.csv and merge it with chol_full in order to see all the information available on a subject.\nTo start with, we need to read in treatment.csv and save this as a data frame called treatment.\n\nR Code\n\n\n\ntreatment &lt;- read.csv(file = \"treatment.csv\")\n\n\n\n\nThen we can merge chol_full and treatment into a single data frame called patients using the following code.\n\nR CodeOutput\n\n\n\npatients &lt;- merge(x = chol_full, y = treatment, by.x = \"id\",\n                  by.y = \"patient_id\", all = TRUE)\nhead(patients[, -c(1:3)])\n\n\n\n\n\n  trig age gender     smoke weight height      bmi treatment\n1  120  48   male   current  99.02   1.70 34.26298      &lt;NA&gt;\n2   NA  42   male      &lt;NA&gt;  73.99   1.84 21.85432 Treatment\n3   NA  NA   &lt;NA&gt;      &lt;NA&gt;     NA     NA       NA Treatment\n4   67  48 female        no  74.90   1.61 28.89549 Treatment\n5   NA  NA   &lt;NA&gt;      &lt;NA&gt;     NA     NA       NA Treatment\n6  139  30 female ex-smoker  86.25   1.83 25.75473   Placebo\n\n\n\n\n\nBecause the column showing the patient ID has a different name in chol_full and treatment, we have had to specify what it is called in each data frame here using by.x = and by.y = (make sure to check the contents of your data frames to notice things like this!). The argument all = TRUE means that we are keeping all information from both data frames, regardless of whether a patient only appears in chol_full or only in treatment. This is why in the excerpt of patients above, there are rows where the value for all variables except treatment are NA.\n\n\nTask\n\n\nThe file class.csv contains information on the average primary class size in the years 2016 - 2022. You can read this file into R and save it as a data frame called class using the following code.\n\nR Code\n\n\n\nclass &lt;- read.csv(file = \"class.csv\")\n\n\n\n\nMerge the information from the data frames education and class together into a new data frame called primary, showing all variables from education and the average class size for primary schools only. Look carefully at which row names these two data frames have in common.\n\nR Code\n\n\n\nprimary &lt;-(x =, y =,\n\nby = c(), all.y =`)\n\n\n\n\n\n\n\n\n\nFor more information on merging data set, see Section 1.11.4 Merging Data Frames of Probability and Statistics with R.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Merging data frames</span>"
    ]
  }
]