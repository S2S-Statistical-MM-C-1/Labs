---
title: "Functions"
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(PASWR2)
library(knitr)
library(kableExtra)
library(ggplot2)
library(tidyverse)
```

We have already seen and used many R functions. Now we are going to learn about some more statistics specific functions, as well as how to write our own functions which will give us a lot of flexibility with what we can do in R.

## Probability functions

There are a range of functions we can use which make working with statistical distributions a lot easier. We are able to generate random numbers from a distribution, calculate cumulative probabilities, compute densities and return quantiles with them.

The name of the distribution you are using is going to be part of the function name, so to keep things simple, let's start by looking at the normal distribution. The four functions you can use with the normal distribution are:

* `rnorm(n, mean = 0, sd = 1)`: this returns a random sample of size `n` from a $N\sim(0,\,1)$ distribution.
* `pnorm(q, mean = 0, sd = 1)`: this computes the probability $\mathbb{P}(X\leq q)$, where $X\sim N(0,\,1)$.
* `dnorm(x, mean = 0, sd = 1)`: this computes the value of the probability density function, $f(x)$.
* `qnorm(p, mean = 0, sd = 1)`: this computes the quantile $x$ such that $\mathbb{P}(X\leq x)=p$, where $X\sim N(0,\,1)$.

Note that `norm` in each function name is because we are using the normal distribution. This part of the function names can be changed based on the distribution we want to use.  For example `rt()`, `rbinom()` and `rf()` each return random samples from the $t$, binomial and $F$ distributions, respectively, provided suitable arguments are give - remember to use the `help()` function to see what arguments are needed.

The arguments `mean = 0` and `sd = 1` are the default values, so leaving them out of any of the functions for the normal distribution above means you will be using the $N(0,\,1)$ distribution. You can change the mean or standard deviation of the distribution by changing the values assigned to the arguments.

The values that `pnorm(q)`, `qnorm(p)` and `dnorm(x)` return are summarised graphically in @fig-normal-image.

```{r normal-image, echo=FALSE, out.width="1200px", fig.pos="H", fig.align="center"}
#| fig-cap: "Summary of probability functions for the standard normal distribution."
#| label: fig-normal-image

knitr::include_graphics("Images/normdist_plots.png", dpi=400)
```

For example, we know that the 97.5^th^ quantile of the $N(0,\,1)$ distribution is roughly 1.96. We can double check this using the following code.

::: panel-tabset
## R Code
```{r func1.1, eval = FALSE}
qnorm(0.975)
```

## Output
```{r func1.2, echo = FALSE}
qnorm(0.975)
```
:::

:::{.question}
::::{.question-header}
Task
::::
::::{.question-container .webex-check}
```{r func-ans1.1, echo=FALSE}
opts1 <- c("`rnorm`", "`pnorm`", "`dnorm`", answer="`qnorm`")
opts2 <- c("`rnorm`", "`pnorm`", "`dnorm`", answer="`qnorm`")
opts3 <- c("`rnorm`", answer="`pnorm`", "`dnorm`", "`qnorm`")
```

Choose the correct function and complete the code for the following scenarios.

* You want to construct a 90% confidence interval so need to know the 95^th^ quantile of the standard normal distribution.

::: panel-tabset
## R Code
::: {.webex-code}
`r mcq(opts1)``(``r fitb(c("0.95", "0.950", "p=0.95", "p=0.950"))``, mean = 0, sd = 1)`
:::
:::

* How would you find the value of $x$ such that $\mathbb{P}(X\leq x)=0.45$, where $X\sim N(100,\,4^2)$?

::: panel-tabset
## R Code
::: {.webex-code}
`r mcq(opts2)``(0.45, ``r fitb(c("mean = 100, sd=4", "100, 4", "sd=4, mean=100", "mean=100, 4", "100, sd=4"))``)`
:::
:::
     
* You want to know the proportion of the $N(0,\,2^2)$ distribution that lies below -2. That is, $\mathbb{P}(X\leq -2)$, where $X\sim N(0,\,2^2)$.

::: panel-tabset
## R Code
::: {.webex-code}
`r mcq(opts3)``(``r fitb(c(-2, "q=-2"))``, mean = 0, sd =``r fitb(2)``)`
:::
:::

<!--
`r hide("Solution")`
* You want to construct a 90% confidence interval so need to know the 95^th^ quantile of the standard normal distribution.

::: panel-tabset
## R Code
```{r func-ans1.2, eval=FALSE}
qnorm(p = 0.95, mean = 0, sd = 1)
```
:::

* How would you find the value of $x$ such that $\mathbb{P}(X\leq x)=0.45$, where $X\sim N(100,\,4^2)$?

::: panel-tabset
## R Code
```{r func-ans1.3, eval=FALSE}
qnorm(p = 0.45, mean = 100, sd = 4)
```
:::

* You want to know the proportion of the $N(0,\,2^2)$ distribution that lies below -2. That is, $\mathbb{P}(X\leq -2)$, where $X\sim N(0,\,2^2)$.

::: panel-tabset
## R Code
```{r func-ans1.4, eval=FALSE}
pnorm(q = -2, mean = 0, sd = 2)
```
:::
`r unhide()`
-->
::::
:::

The normal distribution is not the only one that we can use the four functions introduced above with. @tbl-dist-tab shows some other distributions that can be used. In order to use a different distribution, simply change the `norm` part in the function name to the distribution's R name. Change the arguments `mean =` and `sd =` to the relevant arguments for your chosen distribution as well.

```{r dist-tab-setup, echo=FALSE}
dist <- c("Normal", "Binomial", "Exponential", "Geometric", "Hypergeometric", "Negative Binomial",
          "Poisson", "Student's t", "Uniform", "Chi-square", "F")
func_names <- c("`norm`", "`binom`", "`exp`", "`geom`", "`hyper`", "`nbinom`", "`pois`", "`t`", 
                "`unif`", "`chisq`", "`f`")
args <- c("`mean = 0`: the mean with default value 0.\\\n`sd = 1`: the standard deviation with default value 1.",
          "`size =`: the number of trials.\\\n`prob =`: the probability of success for each trial.",
          "`rate = 1`: the value of $\\theta$ with default value 1.",
          "`prob =`: the probability of success in each trial.",
          "`m =`: the number of objects of type I in the population.\\\n`n =`: the number of objects **not** of type I in the population.\\\n`k =`: the size of the sample taken from the population.",
          "`size =`: the number of successful trials you want to observe.\\\n`prob =`: the probability of success in each trial.",
          "`lambda =`: the value of $\\lambda$.",
          "`df =`: the degrees of freedom.",
          "`min = 0`: the lower limit of the distribution with default value 0.\\\n`max = 1`: the upper limit of the distribution with default value 1.",
          "`df =`: the degrees of freedom.",
          "`df1`: the first degrees of freedom.\\\n`df2`: the second degrees of freedom.")

dist_table <- data.frame(Distribution = dist, `R Name` = func_names, Arguments = args)
colnames(dist_table)[2] <- c("R Name")
```

```{r dist-tab, echo=FALSE, tab.align='center'}
#| tbl-cap: "Distribution names and arguments to use with probability functions."
#| label: tbl-dist-tab

kable(dist_table, format = "markdown")
```

---

To read more, see **Section 1.15 Probability Functions** in *Probability and Statistics with R*.


## Creating functions

So far we have used a number of in built functions in R. It is also possible to create your own functions, specifying the required arguments and what it does.

The setup for creating your own function using `function()` is as follows.

::: panel-tabset
## R Code
```{r func8, eval=FALSE}
fname <- function(argument1, argument2, ...){
  expression
}
```
:::

* `fname`: this is the name you want to give to your function. It can be anything you choose but try not to use names of functions that already exist.
* `argument1`: this is the name of the first argument to be given when you use your function. You can add as many arguments as is necessary for your function to work.
* `expression`: this is what you want your function to evaluate. You write this out using the argument names you have specified.

For example, we can write a function, `normal()`, that:

* draws `n` random values from a normal distribution with mean `m` and standard deviation `s`
* orders them from smallest to largest
* for each random value $x$, returns the probability $\mathbb{P}(X\leq x)$ and the value of the probability density function at this value, $f(x)$

::: panel-tabset
## R Code
```{r func9}
normal <- function(n, m = 0, s = 1){
  x <- rnorm(n = n, mean = m, sd = s)
  x <- sort(x)
  prob <- pnorm(q = x, mean = m, sd = s)
  pdf <- dnorm(x = x, mean = m, sd = s)
  cbind(x, prob, pdf)
}
```
:::

Here we have specified default values of `m = 0` and `s = 1` in our function. This means that if someone uses the function `normal` without specifying values for these arguments, then it will automatically use `m = 0` and `s = 1`.

Note that any vectors we create within the expression for the function are not saved to your **Environment** tab.

We can then use this new function `normal()` to see this information for 5 random values from the $N(200, 40)$ distribution.

::: panel-tabset
## R Code
```{r func10.1, eval = FALSE}
normal(n = 5, m = 200, s = 40)
```

## Output
```{r func10.2, echo = c(2)}
set.seed(1406)
normal(n = 5, m = 200, s = 40)
```
:::

The arguments you use within a function can be either 'named' or 'positional'.

Named arguments are ones where you use the name given in the setup of the function. For example, in our function `normal()`, the argument for the mean is called `m`. You can change the value of the mean using `m = 4` within the `normal()` function for example.

Positional arguments are ones where you don't use the name of the argument given in the setup of the function. For example, we could replicate the above output using the following code where the argument names have not been used.

::: panel-tabset
## R Code
```{r func11.1, eval = FALSE}
normal(5, 200, 40)
```

## Output
```{r func11.2, echo = c(2)}
set.seed(1406)
normal(5, 200, 40)
```
:::

The important thing to remember when using positional arguments is that they are in the same order that their names are specified in the setup of the function so R knows how to match up the values correctly. For example, in the `normal()` function, the mean needs to be the second argument specified and the standard deviation needs to be the third.

---

For more information on writing your own functions in R, see **Section 1.17 Creating Functions** in *Probability and Statistics with R*.











