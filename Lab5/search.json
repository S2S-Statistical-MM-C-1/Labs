[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "S2S Lab 5",
    "section": "",
    "text": "Welcome to the the fifth S2S lab. This lab moves away from teaching specific coding practise and starts to use what we have learned in previous labs to start exploring some ideas in statistics. Specifically, this lab will introduce the concept of sampling distributions - what they are, how they’re constructed and how we can use R to help us in creating them.\nThe sampling distribution is also covered in Chapter 6 Sampling and Sampling Distributions of Probability and Statistics with R, specifically Section 6.4 Sampling Distribution of \\(\\bar X\\) of textbook runs through a similar example that the majority of this lab uses.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome!</span>"
    ]
  },
  {
    "objectID": "01-samplingdist.html",
    "href": "01-samplingdist.html",
    "title": "2  Sampling Distribution of \\(\\bar X\\)",
    "section": "",
    "text": "2.1 Sampling with replacement\nIf you were to take a sample from some population, say the heights of 5 randomly selected students in the lab, and calculate the mean of your sample then this is known as a sample mean. Suppose you took a second sample of 5 randomly selected students and again calculated the sample mean height. It is unlikely that the first sample mean would be equal to the second sample mean. It is also unlikely that either of these sample means would be equal to the population height of all students in the lab today.\nThe sample mean is a statistic and we can find a distribution for a statistic so that properties such as the mean and variance of the sample means can be estimated. The distribution of all possible values that a statistic can take is called the sampling distribution of that statistic.\nLet’s consider an example of finding the sampling distribution of the sample mean, \\(\\bar X\\), and the sampling distribution of the sample variance, \\(S^2\\), in a finite population. Because we are looking at a finite population, we will be able to list all values that \\(\\bar X\\) and \\(S^2\\) can theoretically take.\nImagine we have a bag containing six balls, each with a unique number 1 to 6 printed on them, that we want to sample from. Let \\(X\\) be the random variable denoting the value printed on the ball that is drawn from the bag. \\(X\\) can only take the value 1, 2, 3, 4, 5 or 6 and there is a probability of \\(\\frac{1}{6}\\) that any one of these values is drawn in a random draw.\nThe probability distribution for \\(X\\) is summarised in Table 2.1.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sampling Distribution of $\\bar X$</span>"
    ]
  },
  {
    "objectID": "01-samplingdist.html#sec-with",
    "href": "01-samplingdist.html#sec-with",
    "title": "2  Sampling Distribution of \\(\\bar X\\)",
    "section": "",
    "text": "2.1.1 Sampling distribution for \\(\\bar X\\)\nBecause \\(X\\) comes from a finite population, we can list all possible outcomes of sampling from the bag. If we were to sample with replacement, two balls from the bag, then there are 36 different combinations of values that we might see in a single sample. To list these, we can use the function expand.grid()\nThe function expand.grid() works by providing as the arguments the vectors of different outcomes that can occur. In this case, all the possible values that \\(X\\) can take are \\(\\begin{Bmatrix}1&2&3&4&5&6\\end{Bmatrix}\\). The function then returns a data frame which shows all combinations of the different outcomes provided in the arguments. Just like when setting up a data frame, you can call the columns anything you like. Here, because we are drawing a ball from the bag on two occasions, the columns have been named Draw1 and Draw2.\n\nR CodeOutput\n\n\n\nsamples_w &lt;- expand.grid(Draw1 = 1:6, Draw2 = 1:6)\nhead(samples_w)\n\n\n\n\n\n  Draw1 Draw2\n1     1     1\n2     2     1\n3     3     1\n4     4     1\n5     5     1\n6     6     1\n\n\n\n\n\nNote that the first row of samples_w shows that the one of the outcomes of drawing two balls from the bag is that the first ball has the value 1 and the second ball also has the value 1. It is clear then that expand.grid() shows the possible outcomes of sampling with replacement.\nBecause we are interested in finding the sampling distributions of the mean, \\(\\bar X\\), and of the variance, \\(S^2\\), it makes sense to calculate what these are for each possible sample from the bag.\nRun the code below to calculate the mean and variance for each draw of two balls from the bag, then update the data frame samples_w to contain this information, as well as the sample these values came from.\n\nR Code\n\n\n\nsample_w_means &lt;- apply(X = samples_w, MARGIN = 1, FUN = mean)\n\nsample_w_variances &lt;- apply(X = samples_w, MARGIN = 1, FUN = var)\n\nsamples_w &lt;- cbind(samples_w, Mean = sample_w_means, Variance = sample_w_variances)\n\n\n\n\nThe information in the data frame samples_w is summarised in Table Table 2.2.\n\n\n\n\nTable 2.2: Mean and variance for every combination of \\((x_1, x_2)\\) when sampling with replacement, six numbered balls from a bag.\n\n\n\n\n\n\n\\((x_1,\\,x_2)\\)\nMean\nVariance\n\\((x_1,\\,x_2)\\)\nMean\nVariance\n\\((x_1,\\,x_2)\\)\nMean\nVariance\n\n\n\n\n(1, 1)\n1.0\n0.0\n(1, 3)\n2.0\n2.0\n(1, 5)\n3.0\n8.0\n\n\n(2, 1)\n1.5\n0.5\n(2, 3)\n2.5\n0.5\n(2, 5)\n3.5\n4.5\n\n\n(3, 1)\n2.0\n2.0\n(3, 3)\n3.0\n0.0\n(3, 5)\n4.0\n2.0\n\n\n(4, 1)\n2.5\n4.5\n(4, 3)\n3.5\n0.5\n(4, 5)\n4.5\n0.5\n\n\n(5, 1)\n3.0\n8.0\n(5, 3)\n4.0\n2.0\n(5, 5)\n5.0\n0.0\n\n\n(6, 1)\n3.5\n12.5\n(6, 3)\n4.5\n4.5\n(6, 5)\n5.5\n0.5\n\n\n(1, 2)\n1.5\n0.5\n(1, 4)\n2.5\n4.5\n(1, 6)\n3.5\n12.5\n\n\n(2, 2)\n2.0\n0.0\n(2, 4)\n3.0\n2.0\n(2, 6)\n4.0\n8.0\n\n\n(3, 2)\n2.5\n0.5\n(3, 4)\n3.5\n0.5\n(3, 6)\n4.5\n4.5\n\n\n(4, 2)\n3.0\n2.0\n(4, 4)\n4.0\n0.0\n(4, 6)\n5.0\n2.0\n\n\n(5, 2)\n3.5\n4.5\n(5, 4)\n4.5\n0.5\n(5, 6)\n5.5\n0.5\n\n\n(6, 2)\n4.0\n8.0\n(6, 4)\n5.0\n2.0\n(6, 6)\n6.0\n0.0\n\n\n\n\n\n\n\n\nWe can then use the information contained in samples_w (or in Table 2.2) to construct the sampling distribution for the mean, \\(\\bar X\\). The sampling distribution will tell us all the values that \\(\\bar X\\) can take and the probability with which it takes each value.\nRun the code below to create the sampling distribution of \\(\\bar X\\). This is done by dividing the number of times \\(\\bar X\\) takes each of its possible values by 36 (because we know that there are 36 possible combinations of two balls from the bag and that each combination is equally likely, so any combination has a probability of occurring of \\(\\frac{1}{36}\\)).\nThe function fractions() is used to force R to show these calculated probabilities as a fraction, rather than as a number with many decimal places. The fractions() function is part of a package called MASS so it is necessary to load this into your R session using the code library(MASS).\n\nR CodeOutput\n\n\n\nlibrary(MASS)\n\nsamplingdist_mean_w &lt;- fractions(table(samples_w$Mean)/36)\nsamplingdist_mean_w\n\n\n\n\n\n\n   1  1.5    2  2.5    3  3.5    4  4.5    5  5.5    6 \n1/36 1/18 1/12  1/9 5/36  1/6 5/36  1/9 1/12 1/18 1/36 \n\n\n\n\n\nFor example, \\(\\bar X\\) is equal to 1.5 on two occasions (if the balls drawn are (2, 1) or (1, 2)). We can then say that \\(P\\big(\\bar X=1.5\\big)=\\frac{2}{36}=\\frac{1}{18}\\).\n\n\nTask\n\n\n\nWhat is the mean of the sampling distribution for \\(\\bar X\\)?\n\\(\\mu_{\\bar X}=\\) \n\n\n\nSolution\n\nThe mean can be found by finding the expected value of the sampling distribution for \\(\\bar X\\). The expected value of a discrete random variable \\(X\\) with \\(N\\) discrete values can be found using,\n\\[\n\\mu_X=E[X]=\\sum_{i=1}^N x_iP(X=x_i)\n\\]\nFor the case of \\(\\bar X\\), the mean can then be calculated as,\n\\[\n\\begin{aligned}\n\\mu_{\\bar X}&=1\\times\\frac{1}{36}+1.5\\times\\frac{1}{18}+2\\times\\frac{1}{12}+\\dots+6\\times\\frac{1}{36}\\\\\n&=\\frac{7}{2}=3.5\n\\end{aligned}\n\\] We can do exactly the same thing using R code. First, we need to extract all the individual values that \\(\\bar X\\) can take. This is done by first using the names() function, which extracts each \\(\\bar X\\) value from samplingdist_mean_w because it is a table with named entries, and then by switching these ‘names’ to be numbers using as.numeric() because R initially views the numbers as characters.\nWe then want to multiply each of these values by the corresponding probability that \\(\\bar X\\) takes that value, as shown in the sampling distribution samplingdist_mean_w, and then sum together these products using the sum() function.\n\nR CodeOutput\n\n\n\nmeans_w &lt;- as.numeric(names(samplingdist_mean_w))\nmean_Xbar_w &lt;- sum(means_w*samplingdist_mean_w)\nmean_Xbar_w\n\n\n\n\n\n[1] 7/2\n\n\n\n\n\nAgain, we see that \\(\\mu_{\\bar X}=\\frac{7}{2}=3.5\\).\n\n\nFurther\n\nNote that the value of \\(\\mu_{\\bar X}\\) is the same as the mean of the random variable \\(X\\), \\(\\mu_X\\). This makes sense because,\n\\[\n\\begin{aligned}\n\\mu_{\\bar X}=E[\\bar X]&=E\\bigg[\\frac{\\sum_{i=1}^n X_i}{n}\\bigg]\\\\\n&=\\frac{1}{n}\\sum_{i=1}^n E[X_i]\\\\\n&=\\frac{1}{n}\\sum_{i=1}^n\\mu_X\\\\\n&=\\frac{1}{n}\\cdot n\\mu_X=\\mu_X\n\\end{aligned}\n\\]\nprovided each \\(X_i\\) is independent.\n\n\n\n\n\n\nTask\n\n\n\nWhat is the variance of the sampling distribution for \\(\\bar X\\)?\n\\(\\sigma^2_{\\bar X}=\\) \n\n\n\nSolution\n\nIn order to find the variance of a random variable \\(X\\) with a discrete distribution with \\(N\\) discrete values, we can use the formula,\n\\[\n\\sigma^2_X=Var(X)=\\sum_{i=1}^N x_i^2P(X=x_i)-(\\mu_X)^2\n\\]\nSo for the variance of the mean, \\(\\bar X\\), we can calculate this as,\n\\[\n\\begin{aligned}\n\\sigma^2_{\\bar X}&=\\bigg(1^2\\times\\frac{1}{36}+1.5^2\\times\\frac{1}{18}+\\dots +6^2\\times\\frac{1}{36}\\bigg)-(3.5)^2\\\\\n&=\\frac{35}{24}\\approx1.4583\n\\end{aligned}\n\\]\nWe can also calculate the same thing in R. To do this, the unique values that \\(\\bar X\\) can take are extracted from samplingdist_mean_w, again using the functions names() and as.numeric(). These are then squared and multiplied by the corresponding probability that \\(\\bar X\\) takes this value. The sum() function is used to sum all of these products, and then \\((\\mu_{\\bar X})^2\\), stored in mean_Xbar_w, is subtracted.\n\nR CodeOutput\n\n\n\nmeans_w &lt;- as.numeric(names(samplingdist_mean_w))\nvar_Xbar_w &lt;- sum(means_w^2*samplingdist_mean_w)-(mean_Xbar_w)^2\nvar_Xbar_w\n\n\n\n\n\n[1] 35/24\n\n\n\n\n\nThis confirms that \\(\\sigma^2_{\\bar X}=\\frac{35}{24}\\approx 1.4583\\).\n\n\nFurther\n\nNote that the variance of the sampling distribution for the mean is the variance of the random variable \\(X\\) divided by the size of our sample (\\(n=2\\)). That is, \\(\\sigma^2_{\\bar X}=\\frac{\\sigma_X^2}{n}\\). We can prove this is true since,\n\\[\n\\begin{aligned}\n\\sigma_{\\bar X}^2=Var(\\bar X)&=Var\\bigg(\\frac{\\sum_{i=1}^n X_i}{n}\\bigg)\\\\\n&=\\frac{1}{n^2}\\sum_{i=1}^nVar(X_i)\\\\\n&=\\frac{1}{n^2}\\sum_{i=1}^n\\sigma_X^2\\\\\n&=\\frac{1}{n^2}\\cdot n\\sigma_X^2=\\frac{\\sigma_X^2}{n}\n\\end{aligned}\n\\]\nprovided each \\(X_i\\) is independent.\n\n\n\n\n\n\n2.1.2 Sampling distribution of \\(S^2\\)\nWe are also able to find the sampling distribution for the variance, \\(S^2\\). We again find the number of times the sample variance is equal to each of the distinct values it can take, and divide this by 36. The function fractions() is again used to show these probabilities as fractions. Note that we don’t need to run library(MASS) this time, because the MASS package is already loaded into our R session.\n\nR CodeOutput\n\n\n\nsamplingdist_var_w &lt;- fractions(table(samples_w$Variance)/36)\nsamplingdist_var_w\n\n\n\n\n\n\n   0  0.5    2  4.5    8 12.5 \n 1/6 5/18  2/9  1/6  1/9 1/18 \n\n\n\n\n\nHere we can see that \\(P(S^2=12.5)=\\frac{1}{18}\\) which we could have calculated from Table 2.2 since the sample variance is equal to 12.5 for only two outcomes (when the balls drawn are (6, 1) or (1, 6)), so the probability \\(S^2\\) takes the value 12.5 is equal to \\(\\frac{2}{36}=\\frac{1}{18}\\).\n\n\nTask\n\n\n\nWhat is the mean of the sampling distribution for \\(S^2\\)?\n\\(\\mu_{S^2}=\\) \n\n\n\nSolution\n\nIn order to find the mean of a variable \\(X\\) with a discrete distribution with \\(N\\) discrete values, we can use,\n\\[\n\\mu_X=E[X]=\\sum_{i=1}^N x_iP(X=x_i)\n\\]\nFor the sample variance, we can then calculate the expected value as,\n\\[\n\\begin{aligned}\n\\mu_{S^2}&=0\\times\\frac{1}{6}+0.5\\times\\frac{5}{18}+2\\times\\frac{2}{9}+\\dots+12.5\\times\\frac{1}{18}\\\\\n&=\\frac{35}{12}\\approx 2.9166\n\\end{aligned}\n\\]\nThis can be found in R using the following code.\n\nR CodeOutput\n\n\n\nvars_w &lt;- as.numeric(names(samplingdist_var_w))\nmean_S2_w &lt;- sum(vars_w*samplingdist_var_w)\nmean_S2_w\n\n\n\n\n\n[1] 35/12\n\n\n\n\n\nThis again shows that \\(\\mu_{S^2}=\\frac{35}{12}\\approx 2.9166\\). Note that this is equal to the variance of the random variable \\(X\\), \\(\\sigma^2_{\\bar X}\\).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sampling Distribution of $\\bar X$</span>"
    ]
  },
  {
    "objectID": "01-samplingdist.html#sec-without",
    "href": "01-samplingdist.html#sec-without",
    "title": "2  Sampling Distribution of \\(\\bar X\\)",
    "section": "2.2 Sampling without replacement",
    "text": "2.2 Sampling without replacement\n\n2.2.1 Sampling distribution of \\(\\bar X\\)\nIf instead, we sampled two balls from the bag, but now sampling without replacement, the sampling distributions for the sample mean and for the sample variance will be different because the possible samples of two balls we could end up with are different.\nWhen sampling without replacement, there are fewer outcomes we can end up with. Now there are only \\({6\\choose 2}=15\\) possible outcomes of two balls from the bag of six. We can list all of these possible outcomes with the code below.\nHere, we use the function srs() (which stands for simple random sample) to list these outcomes. This function takes the arguments,\n\npopvalues =: this is a vector of all values seen in the population.\nn =: this is the size of the sample to be taken without replacement from the population.\n\nThe srs() function is part of the PASWR2 package, so it is necessary to run the code library(PASWR2). The function dimnames() is used to set the names of columns in samples_wo to \"Draw1\" and \"Draw2\".\n\nR CodeOutput\n\n\n\nlibrary(PASWR2)\n\nsamples_wo &lt;- srs(popvalues = 1:6, n = 2)\ndimnames(samples_wo) &lt;- list(NULL, c(\"Draw1\", \"Draw2\"))\nhead(samples_wo)\n\n\n\n\n\n     Draw1 Draw2\n[1,]     1     2\n[2,]     1     3\n[3,]     1     4\n[4,]     1     5\n[5,]     1     6\n[6,]     2     3\n\n\n\n\n\nThen, we can calculate the sample mean and sample variance for each possible sample of two balls from the bag. This is done using the apply() function in the code below. Then, the data frame samples_wo is updated to include these values and the samples that they came from.\n\nR Code\n\n\n\nsample_wo_means &lt;- apply(X = samples_wo, MARGIN = 1, FUN = mean)\n\nsample_wo_variances &lt;- apply(X = samples_wo, MARGIN = 1, FUN = var)\n\nsamples_wo &lt;- data.frame(samples_wo, Mean = sample_wo_means,\n                         Variance = sample_wo_variances)\n\n\n\n\nThe information in samples_wo is summarised in Table 2.3.\n\n\n\n\nTable 2.3: Mean and variance for every combination of \\((x_1, x_2)\\) when sampling without replacement, six numbered balls from a bag.\n\n\n\n\n\n\n((x_1,,x_2))\nMean\nVariance\n\n\n\n\n(1, 2)\n1.5\n0.5\n\n\n(1, 3)\n2.0\n2.0\n\n\n(1, 4)\n2.5\n4.5\n\n\n(1, 5)\n3.0\n8.0\n\n\n(1, 6)\n3.5\n12.5\n\n\n(2, 3)\n2.5\n0.5\n\n\n(2, 4)\n3.0\n2.0\n\n\n(2, 5)\n3.5\n4.5\n\n\n(2, 6)\n4.0\n8.0\n\n\n(3, 4)\n3.5\n0.5\n\n\n(3, 5)\n4.0\n2.0\n\n\n(3, 6)\n4.5\n4.5\n\n\n(4, 5)\n4.5\n0.5\n\n\n(4, 6)\n5.0\n2.0\n\n\n(5, 6)\n5.5\n0.5\n\n\n\n\n\n\n\n\nThen we can use the sample means contained in samples_wo to find the sampling distribution of \\(\\bar X\\). The code below creates this distribution by dividing the number of times \\(\\bar X\\) takes any of its unique values by 15 (because there are 15 possible combinations of two draws from the bag, each with equal probability of occurring). The fractions() function from the MASS package has again been used to show these probabilities as rational numbers.\n\nR CodeOutput\n\n\n\nsamplingdist_mean_wo &lt;- fractions(table(samples_wo$Mean)/15)\nsamplingdist_mean_wo\n\n\n\n\n\n\n 1.5    2  2.5    3  3.5    4  4.5    5  5.5 \n1/15 1/15 2/15 2/15  1/5 2/15 2/15 1/15 1/15 \n\n\n\n\n\nThis tells us that, when sampling two balls from the bag of six without replacement, the probability that the mean of that sample is equal to 3 for example, is \\(\\frac{2}{15}\\) i.e. \\(P(\\bar X=3)=\\frac{2}{15}\\).\n\n\nTask\n\n\n\nWhat is the mean of the sampling distribution for \\(\\bar X\\), when sampling without replacement?\n\\(\\mu_{\\bar X}=\\) \n\n\n\nSolution\n\nIn order to find the mean of a discrete random variable \\(X\\) with \\(N\\) discrete values, we can use the formula,\n\\[\n\\mu_X=E[X]=\\sum_{i=1}^N x_iP(X=x_i)\n\\]\nFor the sample mean \\(\\bar X\\), the mean can then be found as,\n\\[\n\\begin{aligned}\n\\mu_{\\bar X}&=1.5\\times\\frac{1}{15}+2\\times\\frac{1}{15}+2.5\\times\\frac{2}{15}+\\dots+5.5\\times\\frac{1}{15}\\\\\n&=\\frac{7}{2}=3.5\n\\end{aligned}\n\\]\nThis can also be found in R using the following code.\n\nR CodeOutput\n\n\n\nmeans_wo &lt;- as.numeric(names(samplingdist_mean_wo))\nmean_Xbar_wo &lt;- sum(means_wo*samplingdist_mean_wo)\nmean_Xbar_wo\n\n\n\n\n\n[1] 7/2\n\n\n\n\n\nThis shows that \\(\\mu_{\\bar X}=\\frac{7}{2}=3.5\\). Note that the expected value of the sampling distribution for \\(\\bar X\\) is equal to the mean of the distribution for random variable \\(X\\) i.e. \\(\\mu_{\\bar X}=E[\\bar X]=\\mu_X\\).\n\n\n\n\n\nTask\n\n\n\nWhat is the variance of the sampling distribution for \\(\\bar X\\), when sampling without replacement?\n\\(\\sigma^2_{\\bar X}=\\) \n\n\n\nSolution\n\nThe formula used to find the variance of a discrete random variable \\(X\\) with \\(N\\) discrete values is,\n\\[\n\\sigma^2_X=Var(X)=\\sum_{i=1}^N x_i^2P(X=x_i)-(\\mu_X)^2\n\\]\nTherefore, the variance of the sampling distribution for \\(\\bar X\\) can be calculated as,\n\\[\n\\begin{aligned}\n\\sigma^2_{\\bar X}&=\\bigg(1.5^2\\times\\frac{1}{15}+2^2\\times\\frac{1}{15}+\\dots +5.5^2\\times\\frac{1}{15}\\bigg)-(3.5)^2\\\\\n&=\\frac{7}{6}\\approx1.1667\n\\end{aligned}\n\\]\nThe same can found in R using the code below.\n\nR CodeOutput\n\n\n\nmeans_wo &lt;- as.numeric(names(samplingdist_mean_wo))\nvar_Xbar_wo &lt;- sum(means_wo^2*samplingdist_mean_wo)-(mean_Xbar_wo)^2\nvar_Xbar_wo\n\n\n\n\n\n[1] 7/6\n\n\n\n\n\nThis shows us again that \\(\\sigma^2_{\\bar X}=\\frac{7}{6}\\approx1.1667\\).\nAnother way we can find the variance of the sampling distribution for \\(\\bar X\\) when sampling without replacement, is to use the formula,\n\\[\n\\sigma^2_{\\bar X}=\\frac{\\sigma_X^2}{n}\\cdot\\frac{N-n}{N-1}\n\\]\n\n\n\n\n\n2.2.2 Sampling distribution of \\(S^2\\)\nWe can also find the sampling distribution for the sample variance, \\(S^2\\). This is done in the following code by counting the number of times \\(S^2\\) takes each unique value and dividing that total by 15. Once again, fractions() shows these values as rational numbers.\n\nR CodeOutput\n\n\n\nsamplingdist_var_wo &lt;- fractions(table(samples_wo$Variance)/15)\nsamplingdist_var_wo\n\n\n\n\n\n\n 0.5    2  4.5    8 12.5 \n 1/3 4/15  1/5 2/15 1/15 \n\n\n\n\n\nThis distribution states that when sampling without replacement, the probability that the variance of a sample of two balls out of six is equal to 8, for example, is \\(\\frac{2}{15}\\) i.e. \\(P(S^2=8)=\\frac{2}{15}\\).\n\n\nTask\n\n\n\nWhat is the expected value of the sampling distribution for \\(S^2\\), when sampling without replacement?\n\\(E[S^2]=\\) \n\n\n\nSolution\n\nThe formula to use here is,\n\\[\n\\mu_X=E[X]=\\sum_{i=1}^N x_iP(X=x_i)\n\\]\nThe expected value of the sample variance is then,\n\\[\n\\begin{aligned}\nE[S^2]&=0.5\\times\\frac{1}{3}+2\\times\\frac{4}{15}+4.5\\times\\frac{1}{5}+\\dots+12.5\\times\\frac{1}{15}\\\\\n&=\\frac{7}{2}= 3.5\n\\end{aligned}\n\\]\nWe can find the same result in R using the following code.\n\nR CodeOutput\n\n\n\nvars_wo &lt;- as.numeric(names(samplingdist_var_wo))\nmean_S2_wo &lt;- sum(vars_wo*samplingdist_var_wo)\nmean_S2_wo\n\n\n\n\n\n[1] 7/2\n\n\n\n\n\nThis shows us once again that \\(E[S^2]=\\frac{7}{2}=3.5\\).\nThe relationship between the expected value of the sample variance, when sampling without replacement, and the variance of the random variable \\(X\\) can be summarised with the formula,\n\\[\nE[S^2]=\\frac{N}{N-1}\\cdot\\sigma_X^2\n\\]\n\n\n\nWe can summarise all of the results we’ve seen so far about the sampling distributions of \\(\\bar X\\) and \\(S^2\\), when sampling with or without replacement, in Table 2.4.\n\n\n\n\nTable 2.4: Summary of properties of the distribution for \\(X\\) and sampling distributions for \\(\\bar X\\) and \\(S^2\\).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(_X)\n(^2_X)\n(E[X])\n(^2_{X})\n(E[S^2])\n\n\n\n\nWith replacement\n3.5\n2.9167\n3.5 (=_X)\n1.4583 (=)\n2.9167 (=_X^2)\n\n\nWithout replacement\n3.5\n2.9167\n3.5 (=_X)\n1.1667 (=)\n3.5 (=_X^2)\n\n\n\n\n\n\n\n\nThe expected value of the sample mean is \\(\\mu_X\\), regardless of whether we are sampling with or without replacement. Both the variance of the sample mean and the expected value of the sample variance change though, depending on whether sampling with or without replacement has been used.\n\nTo follow an example of creating the sampling distribution for the mean and for the variance from a finite population, see Section 6.4 Sampling Distribution of \\(\\bar X\\) in Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sampling Distribution of $\\bar X$</span>"
    ]
  },
  {
    "objectID": "02-functions.html",
    "href": "02-functions.html",
    "title": "3  Functions",
    "section": "",
    "text": "3.1 Probability functions\nWe have already seen and used many R functions. Now we are going to learn about some more statistics specific functions, as well as how to write our own functions which will give us a lot of flexibility with what we can do in R.\nThere are a range of functions we can use which make working with statistical distributions a lot easier. We are able to generate random numbers from a distribution, calculate cumulative probabilities, compute densities and return quantiles with them.\nThe name of the distribution you are using is going to be part of the function name, so to keep things simple, let’s start by looking at the normal distribution. The four functions you can use with the normal distribution are:\nNote that norm in each function name is because we are using the normal distribution. This part of the function names can be changed based on the distribution we want to use. For example rt(), rbinom() and rf() each return random samples from the \\(t\\), binomial and \\(F\\) distributions, respectively, provided suitable arguments are give - remember to use the help() function to see what arguments are needed.\nThe arguments mean = 0 and sd = 1 are the default values, so leaving them out of any of the functions for the normal distribution above means you will be using the \\(N(0,\\,1)\\) distribution. You can change the mean or standard deviation of the distribution by changing the values assigned to the arguments.\nThe values that pnorm(q), qnorm(p) and dnorm(x) return are summarised graphically in Figure 3.1.\nFigure 3.1: Summary of probability functions for the standard normal distribution.\nFor example, we know that the 97.5th quantile of the \\(N(0,\\,1)\\) distribution is roughly 1.96. We can double check this using the following code.\nThe normal distribution is not the only one that we can use the four functions introduced above with. Table 3.1 shows some other distributions that can be used. In order to use a different distribution, simply change the norm part in the function name to the distribution’s R name. Change the arguments mean = and sd = to the relevant arguments for your chosen distribution as well.\nTable 3.1: Distribution names and arguments to use with probability functions.\n\n\n\n\n\n\n\n\n\n\n\nDistribution\nR Name\nArguments\n\n\n\n\nNormal\nnorm\nmean = 0: the mean with default value 0.\nsd = 1: the standard deviation with default value 1.\n\n\nBinomial\nbinom\nsize =: the number of trials.\nprob =: the probability of success for each trial.\n\n\nExponential\nexp\nrate = 1: the value of \\(\\theta\\) with default value 1.\n\n\nGeometric\ngeom\nprob =: the probability of success in each trial.\n\n\nHypergeometric\nhyper\nm =: the number of objects of type I in the population.\nn =: the number of objects not of type I in the population.\nk =: the size of the sample taken from the population.\n\n\nNegative Binomial\nnbinom\nsize =: the number of successful trials you want to observe.\nprob =: the probability of success in each trial.\n\n\nPoisson\npois\nlambda =: the value of \\(\\lambda\\).\n\n\nStudent’s t\nt\ndf =: the degrees of freedom.\n\n\nUniform\nunif\nmin = 0: the lower limit of the distribution with default value 0.\nmax = 1: the upper limit of the distribution with default value 1.\n\n\nChi-square\nchisq\ndf =: the degrees of freedom.\n\n\nF\nf\ndf1: the first degrees of freedom.\ndf2: the second degrees of freedom.\nTo read more, see Section 1.15 Probability Functions in Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "02-functions.html#sec-prob-func",
    "href": "02-functions.html#sec-prob-func",
    "title": "3  Functions",
    "section": "",
    "text": "rnorm(n, mean = 0, sd = 1): this returns a random sample of size n from a \\(N\\sim(0,\\,1)\\) distribution.\npnorm(q, mean = 0, sd = 1): this computes the probability \\(\\mathbb{P}(X\\leq q)\\), where \\(X\\sim N(0,\\,1)\\).\ndnorm(x, mean = 0, sd = 1): this computes the value of the probability density function, \\(f(x)\\).\nqnorm(p, mean = 0, sd = 1): this computes the quantile \\(x\\) such that \\(\\mathbb{P}(X\\leq x)=p\\), where \\(X\\sim N(0,\\,1)\\).\n\n\n\n\n\n\n\nR CodeOutput\n\n\n\nqnorm(0.975)\n\n\n\n\n\n[1] 1.959964\n\n\n\n\n\n\n\nTask\n\n\n\nChoose the correct function and complete the code for the following scenarios.\n\nYou want to construct a 90% confidence interval so need to know the 95th quantile of the standard normal distribution.\n\n\nR Code\n\n\n\nrnormpnormdnormqnorm(, mean = 0, sd = 1)\n\n\n\n\n\nHow would you find the value of \\(x\\) such that \\(\\mathbb{P}(X\\leq x)=0.45\\), where \\(X\\sim N(100,\\,4^2)\\)?\n\n\nR Code\n\n\n\nrnormpnormdnormqnorm(0.45,)\n\n\n\n\n\nYou want to know the proportion of the \\(N(0,\\,2^2)\\) distribution that lies below -2. That is, \\(\\mathbb{P}(X\\leq -2)\\), where \\(X\\sim N(0,\\,2^2)\\).\n\n\nR Code\n\n\n\nrnormpnormdnormqnorm(, mean = 0, sd =)\n\n\n\n\n\n\n\nSolution\n\n\nYou want to construct a 90% confidence interval so need to know the 95th quantile of the standard normal distribution.\n\n\nR Code\n\n\n\nqnorm(p = 0.95, mean = 0, sd = 1)\n\n\n\n\n\nHow would you find the value of \\(x\\) such that \\(\\mathbb{P}(X\\leq x)=0.45\\), where \\(X\\sim N(100,\\,4^2)\\)?\n\n\nR Code\n\n\n\nqnorm(p = 0.45, mean = 100, sd = 4)\n\n\n\n\n\nYou want to know the proportion of the \\(N(0,\\,2^2)\\) distribution that lies below -2. That is, \\(\\mathbb{P}(X\\leq -2)\\), where \\(X\\sim N(0,\\,2^2)\\).\n\n\nR Code\n\n\n\npnorm(q = -2, mean = 0, sd = 2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "02-functions.html#sec-create-func",
    "href": "02-functions.html#sec-create-func",
    "title": "3  Functions",
    "section": "3.2 Creating functions",
    "text": "3.2 Creating functions\nSo far we have used a number of in built functions in R. It is also possible to create your own functions, specifying the required arguments and what it does.\nThe setup for creating your own function using function() is as follows.\n\nR Code\n\n\n\nfname &lt;- function(argument1, argument2, ...){\n  expression\n}\n\n\n\n\n\nfname: this is the name you want to give to your function. It can be anything you choose but try not to use names of functions that already exist.\nargument1: this is the name of the first argument to be given when you use your function. You can add as many arguments as is necessary for your function to work.\nexpression: this is what you want your function to evaluate. You write this out using the argument names you have specified.\n\nFor example, we can write a function, normal(), that:\n\ndraws n random values from a normal distribution with mean m and standard deviation s\norders them from smallest to largest\nfor each random value \\(x\\), returns the probability \\(\\mathbb{P}(X\\leq x)\\) and the value of the probability density function at this value, \\(f(x)\\)\n\n\nR Code\n\n\n\nnormal &lt;- function(n, m = 0, s = 1){\n  x &lt;- rnorm(n = n, mean = m, sd = s)\n  x &lt;- sort(x)\n  prob &lt;- pnorm(q = x, mean = m, sd = s)\n  pdf &lt;- dnorm(x = x, mean = m, sd = s)\n  cbind(x, prob, pdf)\n}\n\n\n\n\nHere we have specified default values of m = 0 and s = 1 in our function. This means that if someone uses the function normal without specifying values for these arguments, then it will automatically use m = 0 and s = 1.\nNote that any vectors we create within the expression for the function are not saved to your Environment tab.\nWe can then use this new function normal() to see this information for 5 random values from the \\(N(200, 40)\\) distribution.\n\nR CodeOutput\n\n\n\nnormal(n = 5, m = 200, s = 40)\n\n\n\n\nnormal(n = 5, m = 200, s = 40)\n\n            x      prob         pdf\n[1,] 194.7766 0.4480522 0.009888883\n[2,] 201.2908 0.5128713 0.009968366\n[3,] 204.4489 0.5442796 0.009912060\n[4,] 234.8700 0.8083276 0.006820707\n[5,] 268.3736 0.9563059 0.002314091\n\n\n\n\n\nThe arguments you use within a function can be either ‘named’ or ‘positional’.\nNamed arguments are ones where you use the name given in the setup of the function. For example, in our function normal(), the argument for the mean is called m. You can change the value of the mean using m = 4 within the normal() function for example.\nPositional arguments are ones where you don’t use the name of the argument given in the setup of the function. For example, we could replicate the above output using the following code where the argument names have not been used.\n\nR CodeOutput\n\n\n\nnormal(5, 200, 40)\n\n\n\n\nnormal(5, 200, 40)\n\n            x      prob         pdf\n[1,] 194.7766 0.4480522 0.009888883\n[2,] 201.2908 0.5128713 0.009968366\n[3,] 204.4489 0.5442796 0.009912060\n[4,] 234.8700 0.8083276 0.006820707\n[5,] 268.3736 0.9563059 0.002314091\n\n\n\n\n\nThe important thing to remember when using positional arguments is that they are in the same order that their names are specified in the setup of the function so R knows how to match up the values correctly. For example, in the normal() function, the mean needs to be the second argument specified and the standard deviation needs to be the third.\n\nFor more information on writing your own functions in R, see Section 1.17 Creating Functions in Probability and Statistics with R.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "03-exercises.html",
    "href": "03-exercises.html",
    "title": "4  Further Exercises",
    "section": "",
    "text": "Exercise 1\nUse R code to answer each of the following exercises.\nA university offers 8 different statistics courses to its honours level students. The numbers of students in each course are as follows:\nSuppose you were to randomly sample three of these statistics courses with replacement. What would the sampling distribution of the sample mean number of students enrolled, \\(\\bar X\\), be? What would the sampling distribution of the sample variance in the number of students enrolled, \\(S^2\\), be?\nCan you use your sampling distributions to find \\(E[\\bar X]\\), \\(\\sigma_{\\bar X}^2\\) and \\(E[S^2]\\)?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "03-exercises.html#exercise-1",
    "href": "03-exercises.html#exercise-1",
    "title": "4  Further Exercises",
    "section": "",
    "text": "There are three course which have 85 students enrolled\nThere are two course which have 112 students enrolled\nThere is one course with 108 students enrolled\nThere is one course with 95 students enrolled\nThere is one course with only 46 students enrolled",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "03-exercises.html#exercise-2",
    "href": "03-exercises.html#exercise-2",
    "title": "4  Further Exercises",
    "section": "Exercise 2",
    "text": "Exercise 2\nNow suppose you want to randomly sample three of the above statistics courses without replacement. Find the sampling distribution of the sample mean number of students, \\(\\bar X\\) and the sampling distribution of the sample variance in the number of students enrolled, \\(S^2\\).\nUse these sampling distributions to find \\(E[\\bar X]\\), \\(\\sigma_{\\bar X}^2\\) and \\(E[S^2]\\).\nHow do these values compare to those found in Exercise 1?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "03-exercises.html#exercise-3",
    "href": "03-exercises.html#exercise-3",
    "title": "4  Further Exercises",
    "section": "Exercise 3",
    "text": "Exercise 3\nDraw a random sample of 100 values from the \\(\\mbox{Poisson}(3)\\) distribution and save these in a vector x.\nUse the vector x to find the probability that the a variable following the \\(\\mbox{Poisson}(3)\\) distribution is less than or equal to each value in x. That is, find \\(P(X\\leq x)\\) when \\(X\\sim\\mbox{Poisson}(3)\\) for each value in x. Save these probabilities in a new vector called p.\nCreate a data frame called poisson which has a column called “draw” which is equal to the vector x and a second column called ’probability” which is equal to the vector p.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "03-exercises.html#exercise-4",
    "href": "03-exercises.html#exercise-4",
    "title": "4  Further Exercises",
    "section": "Exercise 4",
    "text": "Exercise 4\nThe volume of a cylinder is calculated as \\(V_{\\mbox{cylinder}}=\\pi r^2h\\) where \\(r\\) is the radius of the cylinder and \\(h\\) is the height.\n\nWrite a function called cyl.vol which takes the arguments r and h and returns the volume of cylinder with radius r and height h.\nUse your function to find the volume of a cylinder with which has radius 2.8cm and height 24cm.\nUse your function cyl.vol to write another function which can be used to calculate the total volume of \\(n\\) cylinders of the same size. This second function should take the arguments r for the radius, h for the height and n for the number of cylinders.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Further Exercises</span>"
    ]
  },
  {
    "objectID": "04-summary.html",
    "href": "04-summary.html",
    "title": "5  Summary of Functions",
    "section": "",
    "text": "Sampling with replacement\nexpand.grid()\nfractions()\nnames()\nsum()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary of Functions</span>"
    ]
  },
  {
    "objectID": "04-summary.html#sampling-without-replacement",
    "href": "04-summary.html#sampling-without-replacement",
    "title": "5  Summary of Functions",
    "section": "Sampling without replacement",
    "text": "Sampling without replacement\n\nsrs(popvalues = , n = )",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary of Functions</span>"
    ]
  },
  {
    "objectID": "04-summary.html#probability-functions",
    "href": "04-summary.html#probability-functions",
    "title": "5  Summary of Functions",
    "section": "Probability functions",
    "text": "Probability functions\n\nrnorm(n, mean = 0, sd = 1)\n\n\npnorm(q, mean = 0, sd = 1)\n\n\ndnorm(x, mean = 0, sd = 1)\n\n\nqnorm(p, mean = 0, sd = 1)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary of Functions</span>"
    ]
  },
  {
    "objectID": "04-summary.html#creating-functions",
    "href": "04-summary.html#creating-functions",
    "title": "5  Summary of Functions",
    "section": "Creating functions",
    "text": "Creating functions\n\nfname &lt;- function(argument1, argument2, ...){\n  expression\n}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary of Functions</span>"
    ]
  }
]