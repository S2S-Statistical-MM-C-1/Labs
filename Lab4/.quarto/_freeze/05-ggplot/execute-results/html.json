{
  "hash": "3cd0109d1ad57422eedbba49e160d1e9",
  "result": {
    "engine": "knitr",
    "markdown": "# `ggplot2` {#sec-ggplot}\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\nIn Sections [-@sec-qual], [-@sec-quant] and [-@sec-comp], the functions used to create the plots and graphs we have seen so far exist in \"base R\". This means that the functions, such as `barplot()`, `hist()` and `density()`, can just be used without having to first load any specific packages.\n\nOne useful package that can be used to create plots and graphs is called [`ggplot2`](https://ggplot2.tidyverse.org/) (the \"gg\" stands for \"grammar of graphics\"). As the developers put it:\n\n> *You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.*\n\nIn order to use `ggplot2`, you must make sure it is first installed on your device and then load it into your RStudio session.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n```\n:::\n\n:::\n\nGraphs made using `ggplot2` are done so in *layers* (different lines of code). Data is mapped to a *geometric object* (this tells R what type of plot to construct) and the variables are mapped to different aspects of the plot through an *aesthetic function* (this states, for example, which variables should be used for the x-axis and which for the y-axis). Other visual elements of the plot can be altered with additional *layers*.\n\nThe basic setup of a `ggplot2` graph starts with the function `ggplot()`. The argument that this function takes is:\n\n* `data =`: this is a data frame which contains the data to be used in the plot.\n\nAdditional layers can be added after the `ggplot()` function using the `+` operator. For example, the standard setup for a graph using `ggplot2` would be as follows in the code below.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dataframe) +\n  geom_object(aes())\n```\n:::\n\n:::\n\nHere, you would replace `dataframe` with the name of the data frame you want to use. The layer `geom_object()` would also be replaced with the function for the geometric object you want to use. The `aes()` function is where you can specify what variables you want to include in your plot.\n\nSome of the geometric objects you can use with `ggplot2`, as well as their associated options for within the aesthetic function, `aes()`, are listed in @tbl-ggtable.\n\n\n::: {.cell}\n\n:::\n\n::: {#tbl-ggtable .cell tbl-cap='Geometric objects for different graph types and the aesthetic options each can take.'}\n::: {.cell-output-display}\n\n\n|Geometric Object   |Description      |Aesthetic Options                                                                                                                                                                                                                                                   |\n|:------------------|:----------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[`geom_bar()`](05-ggplot.qmd#sec-ggbars)|Barplot          |`x =`: the variable to be plotted along the x-axis.\\\n`fill =`: the categorical variable to be used to split up the bars, or create separate side-by-side bars.                                                                                                       |\n|[`geom_histogram()`](05-ggplot.qmd#sec-gghist)|Histogram        |`x =`: the variable to be plotted along the x-axis.\\\n`fill =`: the categorical variable to be used to fill the bars a different colour for each level of the variable.                                                                                               |\n|[`geom_density()`](05-ggplot.qmd#sec-ggkern)|Density Estimate |`x =`: the variable to be plotted along the x-axis.\\\n`fill =`: a categorical variable for which each level will be given a different colour under the density curve.\\\n`linetype =`: a categorical variable for which each level will be given a different line style. |\n\n\n:::\n:::\n\n\n## Barplots {#sec-ggbars}\n\nLet's make our first graph using `ggplot2`. We can recreate the barplot showing the number of patients from the `EPIDURAL` data set that fall into the three categories indicating how easy it was to find where to administer the epidural anesthetic, seen in [Section @sec-bars].\n\nTo create the basic barplot, we only need to provide the arguments `data = EPIDURAL` within the `ggplot()` function. We want to use the geometric object function `geom_bar()` to create a barplot and provide `x = ease` within the `aes()` function which maps the levels of `ease` to the x-axis.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_bar(aes(x = ease))\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot3.2-1.png){width=672}\n:::\n:::\n\n:::\n\nThis creates a very simplistic barplot, where the bars are labelled with each level of the variable `ease` and are coloured grey. `ggplot2` uses a default \"theme\" which colours the background grey and includes grid lines in white.\n\nWe can add titles and axes labels to `ggplot2` graphs in an additional layer using the function `labs()`. This takes the arguments `title =`, `x =` and `y =` as shown in the code below.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_bar(aes(x = ease)) +\n  labs(title = \"Ease of Locating Anesthesia Administering Location in Patients\",\n       x = \"Ease\", y = \"Frequency\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot4.2-1.png){width=672}\n:::\n:::\n\n:::\n\nWe were also able to produce barplots in base R where the height of each bar was split based on the levels of a categorical variable (for example, splitting by the different physicians in @sec-bi). We can do the same using `ggplot2` by including the aesthetic argument `fill = doctor` in the `aes()` function. This means that we want to \"fill\" each bar to show how many of the patients in each level of `ease` were seen by each physician.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_bar(aes(x = ease, fill = doctor)) +\n  labs(title = \"Ease of Locating Anesthesia Administering Location in Patients\",\n       x = \"Ease\", y = \"Frequency\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot5.2-1.png){width=672}\n:::\n:::\n\n:::\n\nNote that the colours used by `ggplot2` are chosen automatically. A different one is assigned to each doctor because we have used the argument `fill = doctor`. A legend is also included in the plot automatically, showing which colour corresponds to which doctor. The title \"doctor\" is used for the legend since this is the variable name.\n\nTo change the title of the legend, we need to include another layer in the code with the function `guides()`. We can specify the title using `guide_legend(\"Title\")` as shown in the code below. This is passed to the argument `fill =` because \"doctor\" has been passed to the same `fill =` argument within the `aes()` function in `geom_bar()`.\n\nBy default, barplots showing bivariate data are \"stacked\" in `ggplot2`. If we wanted to create separate bars for each doctor within the different levels of `ease`, then we need to include the argument `position = \"dodge\"` within the `geom_bar()` function. Note that this is outside the `aes()` function, as shown in the code below.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_bar(aes(x = ease, fill = doctor), position = \"dodge\") +\n  labs(title = \"Ease of Locating Anesthesia Administering Location in Patients\",\n       x = \"Ease\", y = \"Frequency\") +\n  guides(fill = guide_legend(\"Physician\"))\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot6.2-1.png){width=672}\n:::\n:::\n\n:::\n\n:::{.question}\n::::{.question-header}\nTask\n::::\n::::{.question-container .webex-check}\nComplete the code below to create the barplot showing the number of passengers who survived and did not survive in each class from the `TITANIC3` data set beneath.\n\n::: panel-tabset\n## R Code\n::: {.webex-code}\n`ggplot(data = TITANIC) +`\n<ul style=\"margin-top:-0.2em; margin-left:-1em;\">      \n`geom_bar(aes(x =`<input class='webex-solveme nospaces' size='6' data-answer='[\"pclass\"]'/>`, fill =`<input class='webex-solveme nospaces' size='8' data-answer='[\"survived\"]'/>`, position =`<input class='webex-solveme nospaces' size='7' data-answer='[\"\\\"dodge\\\"\"]'/>`) +`\n</ul>\n<ul style=\"margin-top:-1em; margin-left:-1em;\">\n`labs(title = \"Passengers Surviving the Titanic Sinking in each Class\",`\n</ul>\n<ul style=\"margin-top:-1em; margin-left:1.7em;\">\n`x = \"Class\", y = \"Frequency\") +`\n</ul>\n<ul style=\"margin-top:-1.2em; margin-left:-1em;\">\n`guides(`<input class='webex-solveme nospaces' size='4' data-answer='[\"fill\"]'/>`= guide_legend(\"Did the passenger survive?\"))`\n</ul>\n:::\n\n## Plots\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/gg-ans1.1-1.png){fig-align='center' width=672}\n:::\n:::\n\n:::\n\n\n<div class='webex-solution'><button>Solution</button>\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = TITANIC3) +\n  geom_bar(aes(x = pclass, fill = survived), position = \"dodge\") +\n  labs(title = \"Passengers Surviving the Titanic Sinking in each Class\",\n       x = \"Class\", y = \"Frequency\") +\n  guides(fill = guide_legend(\"Did the passenger survive?\"))\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/gg-ans1.2.2-1.png){width=672}\n:::\n:::\n\n:::\n\n</div>\n\n::::\n:::\n\n<!--\n## Strip Charts\n\nWe saw how to create strip charts in base R, in Section [2.2 Strip Charts](#strip). We can also create strip charts in `ggplot2` using the function `geom_dotplot()`. The code below creates a strip chart showing the weights of patients from the `EPIDURAL` data set along the x-axis (since the argument `x = kg` has been included in the `aes()` function).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_dotplot(aes(x = kg)) +\n  labs(title = \"Patients Weights from the EPIDURAL data set\",\n       x = \"Weight (kg)\")\n```\n\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n`ggplot2` constructs strip charts slightly differently from base R; rather than each dot showing the exact weight of each patient, the height of the stack shows how many patients fall into a \"bin\" of predetermined size - similar to a histogram. `ggplot2` automatically includes values along the scale on the y-axis, however in this case they are not actually very informative as each dot represents one patient.\n\nWe can create a separate strip chart for the patients in each level of the \"ease\" variable by adding an additional layer to the code. The function `facet_grid()` can be used to split the plots made across different rows and/or columns. We need to include the variable names in the style of a formula using the `~` operator. The levels of the variable to the left of `~` will make up the rows, and if a variable is included to the right of `~` then the levels of this will make up the columns that the plots are split across. Because the code below uses `ease ~ .`, the three levels of the \"ease\" variable will make up the three rows, and there will be no split across columns.\n\nWe have also chosen to colour the dots based on the level of \"ease\" they belong to, using `fill = ease`. This automatically creates a legend showing which colour is for which group, but because the rows of the plot are already labelled, this legend is unnecessary. We can remove the legend by including `fill = \"none\"` within the `guides()` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_dotplot(aes(x = kg, fill = ease)) +\n  facet_grid(ease ~ .) +\n  labs(title = \"Patients Weights from the EPIDURAL data set\",\n       x = \"Weight (kg)\") +\n  guides(fill = \"none\")\n```\n\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n-->\n\n\n## Histograms {#sec-gghist}\n\nHistograms are easy to make in `ggplot2` using the function `geom_histogram()`. It is possible to specify the binwidth used to create the bars by including the argument `binwidth =` within this function (but outside the `aes()` function).\n\nThe code below creates a histogram showing the weights of all patients in the `EPIDURAL` data set. The binwidth has been set so that each bar has a range of 10kg.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_histogram(aes(x = kg), binwidth = 10) +\n  labs(title = \"Patient Weights from the EPIDURAL data set\",\n       x = \"Weight (kg)\", y = \"Frequency\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot7.2-1.png){width=672}\n:::\n:::\n\n:::\n\nWe can change the `binwidth =` argument so that the interval each bar covers is increased or decreased. In the code below, we have changed the argument to `binwidth = 50` so each bar covers a range of 50kg, resulting in fewer and wider bars.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_histogram(aes(x = kg), binwidth = 50) +\n  labs(title = \"Patient Weights from the EPIDURAL data set\",\n       x = \"Weight (kg)\", y = \"Density\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot8.2-1.png){width=672}\n:::\n:::\n\n:::\n\n:::{.question}\n::::{.question-header}\nTask\n::::\n::::{.question-container .webex-check}\nComplete the code to create a histogram, using `ggplot2`, showing the ages of all passengers on the Titanic.\n\n::: panel-tabset\n## R Code\n::: {.webex-code}\n`ggplot(data = TITANIC3) +`\n<ul style=\"margin-top: -0.2em; margin-left: 1.8em;\">\n<select class='webex-select'><option value='blank'></option><option value=''>geom_hist</option><option value='answer'>geom_histogram</option><option value=''>histogram</option><option value=''>gghistogram</option></select>`(`<input class='webex-solveme nospaces' size='12' data-answer='[\"aes(x = age)\"]'/>`, binwidth = 10) +`\n</ul>\n<ul style=\"margin-top: -0.9em; margin-left: 1.5em;\">\n`labs(title = \"Ages of Passengers on the Titanic\",`\n</ul>\n<ul style=\"margin-top: -1em; margin-left: 1.6em;\">\n`x = \"Age\", y = \"Frequency\")`\n</ul>\n:::\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/gg-ans2.1.1-1.png){width=672}\n:::\n:::\n\n:::\n\n\n<div class='webex-solution'><button>Solution</button>\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = TITANIC3) +\n  geom_histogram(aes(x = age), binwidth = 10) +\n  labs(title = \"Ages of Passengers on the Titanic\",\n       x = \"Age\", y = \"Frequency\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/gg-ans2.2-1.png){width=672}\n:::\n:::\n\n:::\n\n</div>\n\n::::\n:::\n\n\n## Kernel Density Estimators {#sec-ggkern}\n\nTo create plots of kernel density estimates in `ggplot2`, we use the function `geom_density()`. A simple plot showing the kernel density estimate of the weights of all patients from the `EPIDURAL` data set is created using the code below.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_density(aes(x = kg)) +\n  labs(title = \"Density of Patient Weights\",\n       x = \"Weight (kg)\", y = \"Density\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot9.2-1.png){width=672}\n:::\n:::\n\n:::\n\nWe are able to superimpose a density estimate above a histogram by creating the histogram and density curve as two separate layers after the `ggplot()` function. For example, in the code below the histogram is created first and then the density plot is built on top of it.\n\nRemember that the histogram needs to be a density histogram, and not a frequency histogram, in order to be able to superimpose a density curve. We can create a density histogram in `ggplot2` by including the argument `y = after_stat(density)` within the `aes()` function in `geom_histogram()`.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_histogram(aes(x = kg, y = after_stat(density)), binwidth = 10) +\n  geom_density(aes(x = kg)) +\n  labs(title = \"Density of Patient Weights\",\n       x = \"Weight (kg)\", y = \"Density\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot10.2-1.png){width=672}\n:::\n:::\n\n:::\n\n[Section @sec-comp] looked at comparing the distributions of BMI values for patients in the two treatment groups (traditional sitting and hamstring stretch). We can use `ggplot2` to create side-by-side plots showing a histogram and kernel density estimate of these distributions for the two groups.\n\nIn order to create a plot for each treatment group, we need to use the function `facet_grid()`. This splits the plots made across different rows and/or columns. We need to include the names of categorical variables in the style of a formula using the `~` operator. The levels of the variable to the left of `~` will make up the rows, and if a variable is included to the right of `~` then the levels of this will make up the columns that the plots are split across. Using the formula `. ~ treatment` means we have one column for the traditional sitting group and another for the hamstring stretch group.\n\nIn the code below we have coloured the histogram a different colour for each group using the argument `fill = treatment` within the `aes()` argument in `geom_histogram()`. This automatically creates a legend showing which colour is for which group, but because the columns of the plot are already labelled, this legend is unnecessary. We can remove the legend by including `fill = \"none\"` within the `guides()` argument.\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = EPIDURAL) +\n  geom_histogram(aes(x = BMI, y = after_stat(density), fill = treatment), binwidth = 5) +\n  geom_density(aes(x = BMI)) +\n  facet_grid(. ~ treatment) +\n  labs(title = \"Density of Patients' BMI\",\n       x = \"Weight (kg)\", y = \"Density\") +\n  guides(fill = \"none\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/ggplot11.2-1.png){width=672}\n:::\n:::\n\n:::\n\nWe can see from the plots above that both distributions are right skewed, however the skew in the hamstring stretch group is slightly more extreme.\n\n:::{.question}\n::::{.question-header}\nTask\n::::\n::::{.question-container .webex-check}\nComplete the code below to create the following histogram and density plots which show the distribution of passenger age for each class of passengers on board the Titanic.\n\n::: panel-tabset\n## R Code\n::: {.webex-code}\n`ggplot(data = TITANIC3) +`\n<ul style=\"margin-top:-0.2em; margin-left:-1em;\">     \n`geom_histogram(aes(x = age, y = `<input class='webex-solveme nospaces' size='19' data-answer='[\"after_stat(density)\"]'/>`, fill =`<input class='webex-solveme nospaces' size='6' data-answer='[\"pclass\"]'/>`),`\n</ul>\n<ul style=\"margin-top:-1.2em; margin-left:7em;\">\n`binwidth = 5) +`\n</ul>\n<ul style=\"margin-top:-1.2em; margin-left:-1em;\">\n`geom_density(aes(x = age)) +`\n</ul>\n<ul style=\"margin-top:-1em; margin-left:-1em;\">\n`facet_grid(`<input class='webex-solveme nospaces' size='10' data-answer='[\"pclass ~ .\",\". ~ pclass\"]'/>`) +`\n</ul>\n<ul style=\"margin-top:-1em; margin-left:-1em;\">\n`labs(title = \"Density of Passenger Ages\",`\n</ul>\n<ul style=\"margin-top:-1em; margin-left:1.7em;\">\n`x = \"Age\", y = \"Density\") +`\n</ul>\n<ul style=\"margin-top:-1em; margin-left:-1em;\">\n`guides(fill = \"none\")`\n</ul>\n:::\n\n## Plots\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/gg-ans3.3-1.png){fig-align='center' width=672}\n:::\n:::\n\n:::\n\n\n<div class='webex-solution'><button>Solution</button>\n\n::: panel-tabset\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = TITANIC3) +\n  geom_histogram(aes(x = age, y = after_stat(density), fill = pclass),\n                 binwidth = 5) +\n  geom_density(aes(x = age)) +\n  facet_grid(pclass ~ .) +\n  labs(title = \"Density of Passenger Ages\",\n       x = \"Age\", y = \"Density\") +\n  guides(fill = \"none\")\n```\n:::\n\n\n## Plots\n\n::: {.cell}\n::: {.cell-output-display}\n![](05-ggplot_files/figure-html/gg-ans3.4.2-1.png){width=672}\n:::\n:::\n\n:::\n\n</div>\n\n::::\n:::\n\n---\n\n`ggplot2` can be used to create many different types of plots and graphs, not just those detailed above. For further examples of constructing barplots, histograms and kernel density estimates in `ggplot2`, as well as an introduction to the other plots it can be used to create, see [Section 2.9.5 Graphics with `ggplot2`](https://read.kortext.com/reader/pdf/92741/169){target=\"_blank\"} of *Probability and Statistics with R*.\n\n\n\n\n\n",
    "supporting": [
      "05-ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}