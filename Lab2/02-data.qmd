---
title: "Data Structures"
tbl-cap-location: top
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(PASWR2)
library(knitr)
library(kableExtra)
library(ggplot2)
library(tidyverse)
```

R uses various different types of 'data structures' which are really just ways to store information of varying types. A lot of the data structures R uses are defined in terms of vectors, so it is important you are familiar with constructing and manipulating vectors in R (see [S2S Lab 1](../Lab1/){target="_blank"}).

Some of the common data structures we will become familiar with are;

-   [**vectors**](../Lab1/01-vectors.html){target="_blank"} (covered in [Lab 1](../Lab1/){target="_blank"})
-   [**arrays**](02-data.qmd#sec-arrays)
-   [**matrices**](02-data.qmd#sec-mat)
-   [**factors**](02-data.qmd#sec-fact)
-   [**data frames**](02-data.qmd#sec-df)
-   [**lists**](06-lists.qmd)

------------------------------------------------------------------------

Each of the data structures presented here are covered using additional examples in **Section 1.9 R Data Structures** of *Probability and Statistics with R*.

## Arrays {#sec-arrays}

Arrays are defined as multidimensional arrangements of elements. This means that rather than storing data in a one dimensional vector, you can spread the elements of this vector across multiple dimensions.

This sounds quite complicated so let's look at an example. First, let's create a long vector of the numbers 1 up to 24 to give us elements to populate this array with.

::: panel-tabset
## R Code

```{r array1}
vect <- 1:24
```
:::

We can then use the `array()` function to turn the vector `vect` into an array. The `array()` function takes the following arguments:

-   `data =`: this is the vector of elements that we want to populate the array with.
-   `dim =`: this is another vector giving the maximum number of rows first, then the maximum number of columns and finally the maximum number of 'layers'.

We can turn `vect` into an array, called `A1`, using the following code.

::: panel-tabset
## R Code

```{r array2.1, eval = FALSE}
A1 <- array(data = vect, dim = c(2, 4, 3))
A1
```

## Output

```{r array2.2, echo = FALSE}
A1 <- array(data = vect, dim = c(2, 4, 3))
A1
```
:::

Here we have populated `A1` with the values 1 to 24, so that it has dimensions 2 $\times$ 4 $\times$ 3. This means that we have created 3 layers where each layer is a 2 $\times$ 4 matrix.

The values from `vect` are entered into `A1` going down the columns first, then moving from left to right before moving onto the next layer. This order of entering elements is called column-major order, since columns are filled in first.

------------------------------------------------------------------------

You can learn more about creating arrays in **Section 1.9.1 Arrays and Matrices** of *Probability and Statistics with R*.

## Matrices {#sec-mat}

### Creating matrices {#sec-creating-mat .unnumbered}

Matrices can be thought of as two dimensional arrays i.e. they don't have an argument saying how many layers they should contain. Therefore, matrices can also be created using the `array()` function and ensuring that the `dim =` argument is provided with a vector only of length two. This vector then corresponds to the number of rows and columns, respectively, that the matrix has.

To create a matrix called `M1`, which is populated with the elements from `vect` and has 6 rows and 4 columns, we can use the following code.

::: panel-tabset
## R Code

```{r mat1.1, eval = FALSE}
M1 <- array(data = vect, dim = c(6, 4))
M1
```

## Output

```{r mat1.2, echo = FALSE}
M1 <- array(data = vect, dim = c(6, 4))
M1
```
:::

Since `M1` has dimensions 6 $\times$ 4, it contains 24 elements - the same number of elements as is in the vector `vect`. If instead we had defined dimensions which gave fewer than 24 elements for `M1`, then `array()` would go through and fill in the elements of `M1` with the elements of `vect` in column-major order, until there were no spaces left to fill. This would mean that not all the values from `vect` would appear in `M1`.

::: panel-tabset
## R Code

```{r mat2.1, eval = FALSE}
array(data = vect, dim = c(6, 2))
```

## Output

```{r mat2.2, echo = FALSE}
array(data = vect, dim = c(6, 2))
```
:::

If we had defined the dimensions so that `M1` contained more than 24 elements, then the values of `vect` would be repeated for as long as necessary until all of the elements of `M1` have a value.

::: panel-tabset
## R Code

```{r mat3.1, eval = FALSE}
array(data = vect, dim = c(6, 5))
```

## Output

```{r mat3.2, echo = FALSE}
array(data = vect, dim = c(6, 5))
```
:::

::: question
::: question-header
Task
:::

::: question-container
Use the `array()` function and the `letters` vector to create a 5 $\times$ 5 matrix containing the letters of the alphabet in column-major order, up to "y".

`r hide("Solution")` ::: panel-tabset \## R Code

```{r matans1.1, eval = FALSE}
array(data = letters, dim = c(5, 5))
```

## Output

```{r matans1.2, echo = FALSE}
array(data = letters, dim = c(5, 5))
```
:::

`r unhide()`
:::

:::

It is also possible to create matrices using the `matrix()` function. This has the advantage of allowing you to specify whether the elements should be filled in using column-major order or row-major order (where the elements are filled in from left to right along rows and then from top to bottom). The arguments that the `matrix()` function can be given are:

-   `data =`: this is the vector of elements that we want to fill in the matrix with.
-   `nrow =`: this is the number of rows the matrix should contain.
-   `ncol =`: this is the number of columns the matrix should contain.
-   `byrow =`: this takes values `TRUE` or `FALSE` and states whether the elements should be entered in row-major order (`TRUE`) or column-major order (`FALSE`). By default, the value is `FALSE` and elements will be entered in column-major order if you miss out this argument.

Only one of `nrow =` or `ncol =` needs to be included in the `matrix()` function because R will automatically calculate how many of the non-specified argument are required, based on the length of the vector given to `data =`.

We can create the same matrix as `M1` using the `matrix()` function. Let's call it `M2`.

::: panel-tabset
## R Code

```{r mat4.1, eval = FALSE}
M2 <- matrix(data = vect, ncol = 4, byrow = FALSE)
M2
```

## Output

```{r mat4.2, echo = FALSE}
M2 <- matrix(data = vect, ncol = 4, byrow = FALSE)
M2
```
:::

If we wanted to fill in the elements in row-major order, then we could instead use the following code.

::: panel-tabset
## R Code

```{r mat5.1, eval = FALSE}
M3 <- matrix(data = vect, nrow = 6, byrow = TRUE)
M3
```

## Output

```{r mat5.2, echo = FALSE}
M3 <- matrix(data = vect, nrow = 6, byrow = TRUE)
M3
```
:::

::: question
::: question-header
Task
:::

::: question-container
Create a 5 $\times$ 5 matrix containing the first 25 letters of the alphabet using `matrix()`. Fill in the elements in row-major order.

`r hide("Solution")` ::: panel-tabset \## R Code

```{r matans2.1, eval = FALSE}
matrix(data = letters, nrow = 5, ncol = 5, byrow = TRUE)
```

## Output

```{r matans2.2, echo = FALSE}
matrix(data = letters, nrow = 5, ncol = 5, byrow = TRUE)
```
:::

Here, we have to use both `nrow =` and `ncol =` to force the matrix to be 5 $\times$ 5. Since there are 26 letters in the alphabet, `matrix()` will first try to repeat them so that they are all included if only one of the number of rows or columns is specified (e.g. resulting in 6 columns if only 5 rows is specified), rather than leaving letters out.

This is why we also see the warning telling us that the length of `letters` is not a multiple of 5. `r unhide()`
:::

:::

<!-- dimensions of matrices -->

To check the dimensions of a matrix (or an array), we use the function `dim()`. For matrices, this will return a vector of length 2 where the first value is the number of rows and the second value is the number of columns.

For example we can see that `M1` has 6 rows and 4 columns using the following code.

::: panel-tabset
## R Code

```{r mat6.1, eval = FALSE}
dim(M1)
```

## Output

```{r mat6.2, echo = FALSE}
dim(M1)
```
:::

### Naming rows and columns {#sec-naming-mat .unnumbered}

<!-- row/column names of matrices using dimnames() -->

It is possible to name rows and columns of a matrix. This is useful if it holds some data corresponding to different variables that you want to label, for example we might want to represent the following table, showing the number of births recorded in four different cities in Scotland in the years 2017, 2018 and 2019, as a matrix.

```{r birthsetup, echo=FALSE}
birth.data <- c(5033, 4899, 4683, 6852, 6548, 6553, 2402, 2337, 2260, 1493, 1488, 1417)
years <- c("2017", "2018", "2019")
cities <- c("Edinburgh", "Glasgow", "Aberdeen", "Dundee")

birth.table <- matrix(birth.data, ncol=3, byrow=TRUE)
dimnames(birth.table) <- list(cities, years)

# https://statistics.gov.scot/resource?uri=http%3A%2F%2Fstatistics.gov.scot%2Fdata%2Fbirths
```

```{r birthtable, echo=FALSE}
#| label: tbl-births
#| tbl-cap: "Recorded births in Scottish cities in 2017, 2018, 2019."

kable(birth.table)
```

We can create a matrix containing these values and then name the rows and columns using the following code.

::: panel-tabset
## R Code

```{r mat7.1, eval = FALSE}
data <- c(5033, 4899, 4683, 6852, 6548, 6553, 2402, 2337, 2260, 1493, 1488, 1417)

births <- matrix(data = data, nrow = 4, byrow = TRUE)

cities <- c("Edinburgh", "Glasgow", "Aberdeen", "Dundee")
years <- c("2017", "2018", "2019")

dimnames(births) <- list(cities, years)
births
```

## Output

```{r mat7.2, echo = FALSE}
data <- c(5033, 4899, 4683, 6852, 6548, 6553, 2402, 2337, 2260, 1493, 1488, 1417)

births <- matrix(data = data, nrow = 4, byrow = TRUE)

cities <- c("Edinburgh", "Glasgow", "Aberdeen", "Dundee")
years <- c("2017", "2018", "2019")

dimnames(births) <- list(cities, years)
births
```
:::

Here, we have used the function `dimnames()`. By itself, `dimnames()` will extract the row and column names of a matrix, but we can also set these names by using the assign operator `<-`. We have put the two vectors on the right hand side of the `<-` operator, meaning we want the row and column names to be these two vectors (see @sec-list for more details on the `list()` function).

We can now use either the row/column names to extract particular elements from the matrix. We do this using square brackets, `[ ]`, similar to with vectors, but we now need to specify the row and column we are interested in.

For example, if we wanted to extract the number of births in Dundee in 2017, we can run either of the following lines of code.

::: panel-tabset
## R Code

```{r mat8.1.1, eval = FALSE}
births["Dundee", "2017"]
```

## Output

```{r mat8.1.2, echo = FALSE}
births["Dundee", "2017"]
```
:::

::: panel-tabset
## R Code

```{r mat8.2.1, eval = FALSE}
births[4, 1]
```

## Output

```{r mat8.2.2, echo = FALSE}
births[4, 1]
```
:::

Note that when we use the row/column names, they are in quotation marks because they are saved as character vectors in R. It is important that the row you are interested in is stated first in `[ ]`, and then the column.

::: question
::: question-header
Task
:::

::: {.question-container .webex-check}
Complete the code to show the number of births in Glasgow in all 3 years.

::: panel-tabset
## R Code

::: webex-code
` births[``r fitb(c(print(" \"Glasgow\", ", quote=FALSE), print(" \"Glasgow\", c(\"2017\", \"2018\", \"2019\") ", quote=FALSE), print(" \"Glasgow\", 1:3 ", quote=FALSE), print(" \"Glasgow\", c(1, 2, 3) ", quote=FALSE), print(" 2, ", quote=FALSE), print(" 2, c(\"2017\", \"2018\", \"2019\") ", quote=FALSE), print(" 2, 1:3 ", quote=FALSE), print(" 2, c(1, 2, 3) ", quote=FALSE)), ignore_ws=TRUE)``] `
:::
:::

`r hide("Solution")` There are several ways we could extract the data for these years. For example, we can specify that we want the row relating to Glasgow using either `"Glasgow"` or simply `2`.

To tell R that we want to see 2017, 2018 and 2019, we can simply leave the column entry blank (make sure to still have a comma between rows and columns within the square brackets i.e. `["Glasgow", ]`). R will then just return the entire row relating to Glasgow.

Alternatively, you could specify columns 1 to 3 using `1:3` or `c(1, 2, 3)`, or you could use the column names; `c("2017", "2018", "2019")`.

That is, any of the following lines of code can be used to show the number of births in Glasgow.

::: panel-tabset
## R Code

```{r matans3.1, eval=FALSE}
births["Glasgow", ]
births[2, ]
births["Glasgow", 1:3]
births[2, 1:3]
births["Glasgow", c(1, 2, 3)]
births[2, c(1, 2, 3)]
births["Glasgow", c("2017", "2018", "2019")]
births[2, c("2017", "2018", "2019")]
```

## Output

```{r matans3.2, echo=FALSE}
births["Glasgow", ]
```
:::

`r unhide()`
:::
:::

See @sec-dim to learn how to find the dimensions of whatever you extract from a matrix.

### Calculating statistics {#sec-calculate-mat .unnumbered}

We can apply a function across the rows or columns of a matrix to calculate the mean or standard deviation for example using the function `apply()`. The arguments that can be given to `apply()` include:

-   `X =`: this is the matrix (or array) we want to apply the function to.
-   `MARGIN =`: this tells R whether we want to apply the function to the rows or the columns. A value of `1` means the function will be applied to the rows and `2` means the function will be applied to each column.
-   `FUN =`: this is the function we want to apply. It can be things like the mean (`mean`), median (`median`), or standard deviation (`sd`).

For example, if we wanted to know the mean births for each city across the three years, we can use the following code.

::: panel-tabset
## R Code

```{r mat11.1, eval = FALSE}
apply(X = births, MARGIN = 1, FUN = mean)
```

## Output

```{r mat11.2, echo = FALSE}
apply(X = births, MARGIN = 1, FUN = mean)
```
:::

::: question
::: question-header
Task
:::

::: {.question-container .webex-check}
What is the standard deviation for the number of births in 2019?

`r fitb(2337.263)` *(Give your answer to three decimal places)*

`r hide("Solution")` We can calculate the standard deviation in all three years using the `apply()` function. Because we want to find the standard deviation in each column, we need to set `MARGIN = 2`. The `FUN`ction we should use is `sd`. That is;

::: panel-tabset
## R Code

```{r matans4.1, eval = FALSE}
apply(X = births, MARGIN = 2, FUN = sd)
```

## Output

```{r matans4.2, echo = FALSE}
apply(X = births, MARGIN = 2, FUN = sd)
```
:::

It is then easy to see that the standard deviation for 2019 is `r round(apply(X = births, MARGIN = 2, FUN = sd)[3], 3)`. `r unhide()`
:::
:::

### Vector/Matrix multiplication {#sec-mat-mult .unnumbered}

R can be used to complete vector and matrix multiplication. The operator used for this is `%*%`. For example, for the following matrix and vector,

$$
\boldsymbol{X}=\begin{bmatrix}2&4&-1\\3&2&2\\1&2&-1\end{bmatrix},\,\,\,\,\boldsymbol{y}=\begin{bmatrix}1\\1\\3\end{bmatrix}
$$

The solution to $\boldsymbol{X}\times\boldsymbol{y}$ can be found using the following code.

::: panel-tabset
## R Code

```{r mat12.1, eval = FALSE}
X <- matrix(data = c(2, 4, -1, 3, 2, 2, 1, 2, -1), nrow = 3, byrow = TRUE)
y <- matrix(data = c(1, 1, 3), nrow = 3, byrow = TRUE)

X%*%y
```

## Output

```{r mat12.2, echo = FALSE}
X <- matrix(data = c(2, 4, -1, 3, 2, 2, 1, 2, -1), nrow = 3, byrow = TRUE)
y <- matrix(data = c(1, 1, 3), nrow = 3, byrow = TRUE)

X%*%y
```
:::

If instead we wanted to calculate $\boldsymbol{y}^\intercal\times\boldsymbol{X}$ we would first have to transpose `y`. Matrices can be transposed using the function `t()`.

::: panel-tabset
## R Code

```{r mat13.1, eval = FALSE}
t(y)%*%X
```

## Output

```{r mat13.2, echo = FALSE}
t(y)%*%X
```
:::

R can also be used to solve a system of equations. For example, we have just seen that,

$$
\begin{aligned}
(2\times 1)+(4\times 1)+(-1\times 3)&=3\\
(3\times 1)+(2\times 1)+(2\times 3)&=11\\
(1\times 1)+(2\times 1)+(-1\times 3)&=0
\end{aligned}
$$

But suppose we didn't know the vector $\boldsymbol{y}$, and instead were given the system of equations,

$$
\begin{aligned}
2x+4y-z&=3\\
3x+2y+2z&=11\\
x+2y-z&=0
\end{aligned}
$$

This can also be represented as,

$$
\boldsymbol{Xy}=\boldsymbol{z},\,\mbox{ where }
\boldsymbol{X}=\begin{bmatrix}2&4&-1\\3&2&2\\1&2&-1\end{bmatrix},\,\,\,\,\boldsymbol{y}=\begin{bmatrix}x\\y\\z\end{bmatrix},\mbox{ and }\boldsymbol{z}=\begin{bmatrix}3\\11\\0\end{bmatrix}
$$

We can then use R to solve this system of equations using the `solve()` function. We need to give `solve()` the matrix of coefficients, $\boldsymbol{X}$, and the vector $\boldsymbol{z}$.

::: panel-tabset
## R Code

```{r mat14.1, eval = FALSE}
z <- matrix(data = c(3, 11, 0), nrow = 3, byrow = TRUE)

solve(X, z)
```

## Output

```{r mat14.2, echo = FALSE}
z <- matrix(data = c(3, 11, 0), nrow = 3, byrow = TRUE)

solve(X, z)
```
:::

This then gives the solution $\boldsymbol{y}=\begin{bmatrix}1&1&3\end{bmatrix}^\intercal$, which is what we expected to see.

It is also possible to use the `solve()` function to simply find the inverse of a matrix. This is done by providing it with only one argument - the matrix to be inverted. For example, the code below returns the inverse of the matrix $X$.

::: panel-tabset
## R Code

```{r mat15.1, eval = FALSE}
solve(X)
```

## Output

```{r mat15.2, echo = FALSE}
solve(X)
```
:::

We can see that,

$$
\boldsymbol{X}^{-1}=\begin{bmatrix}-1.50&0.50&2.50\\1.25&-0.25&-1.75\\1.00&0.00&-2.00\end{bmatrix}
$$

------------------------------------------------------------------------

There are additional details and examples of using matrices in R in Sections **1.9.1 Arrays and Matrices** and **1.9.2 Vector and Matrix Operations** of *Probability and Statistics with R*.

## Factors {#sec-fact}

Factors are similar to vectors in R, however they have additional information and are used to store categorical data, for example someone's gender or marriage status. They record the "levels" of the categorical variable stored within the vector which each numerical value corresponds to.

For example, suppose you are interested in the qualification level of several university alumni. You might use a simple encoding of `1`="Bachelor's degree", `2`="Master's degree" and `3`="PhD" to record these data.

This might give us data that looks like the following vector `degree`.

::: panel-tabset
## R Code

```{r fact1.1, eval = FALSE}
degree1 <- c(1, 1, 2, 1, 3)
degree1
```

## Output

```{r fact1.2, echo = FALSE}
degree1 <- c(1, 1, 2, 1, 3)
degree1
```
:::

By itself, `degree` is not very informative about what level of degree each student was awarded. We can fill in the rest of this information by changing `degree1` from a `vector` to a `factor`.

To create a factor we use the function `factor()`. This function can be given the following arguments:

-   `x =`: the vector of data which we want to define categories for.
-   `levels =`: this is a vector of all possible values that the elements in `x` can take.
-   `labels =`: this is a vector containing the names of each level of the category.

For example, to convert the vector `degree1` into a factor called `degree_factor1` we use:

::: panel-tabset
## R Code

```{r fact2.1, eval = FALSE}
degree_factor1 <- factor(x = degree1, levels = 1:3,
                         labels = c("Bachelor's", "Master's", "PhD"))
degree_factor1
```

## Output

```{r fact2.2, echo = FALSE}
degree_factor1 <- factor(x = degree1, levels = 1:3,
                         labels = c("Bachelor's", "Master's", "PhD"))
degree_factor1
```
:::

If instead, `degree` had been a character vector stating the level of degree awarded, we can still turn this into a factor so that R knows this is categorical data and there are only three levels we are interested in.

::: panel-tabset
## R Code

```{r fact3.1, eval = FALSE}
degree2 <- c("Bachelor's", "Bachelor's", "Master's", "Bachelor's", "PhD" )

degree_factor2 <- factor(x = degree2,
                         levels = c("Bachelor's", "Master's", "PhD"))
degree_factor2
```

## Output

```{r fact3.2, echo = FALSE}
degree2 <- c("Bachelor's", "Bachelor's", "Master's", "Bachelor's", "PhD" )

degree_factor2 <- factor(x = degree2,
                         levels = c("Bachelor's", "Master's", "PhD"))
degree_factor2
```
:::

You can also change the labels of the levels used within a pre-existing factor using the `levels()` function.

::: panel-tabset
## R Code

```{r fact4.1, eval = FALSE}
levels(degree_factor2) <- c("BSc", "MSc", "PhD")
degree_factor2
```

## Output

```{r fact4.2, echo = FALSE}
levels(degree_factor2) <- c("BSc", "MSc", "PhD")
degree_factor2
```
:::

::: question
::: question-header
Task
:::

::: question-container
```{r surveysetup, echo=FALSE}
survey <- c("Agree", "Agree", "Agree", "Unsure", "Disgaree")
students <- c("Student 1", "Student 2", "Student 3", "Student 4", "Student 5")

survey.table <- cbind(students, survey)
colnames(survey.table) <- c("Student", "Answer")
```

The results from a survey asking students whether statistics is the best subject are shown below. They were given a choice of "Agree", "Disagree" and "Unsure".

```{r survey-table, echo=FALSE}
kable(survey.table)
```

Create and print a factor, called `survey`, which contains the answers of these five students as well as the levels of response they could have given.

`r hide("Solution")` There are several ways you could create this factor. Here, we first store the answers given in the vector `answers` and use the encoding `1`="Agree", `2`="Disagree" and `3`="Unsure" (to save on typing!).

::: panel-tabset
## R Code

```{r, eval = FALSE}
answers <- c(1, 1, 1, 3, 2)
```

Then we can create the factor `survey` using the `factor()` function.

```{r factans1.2, eval = FALSE}
survey <- factor(x = answers, levels = 1:3,
                 labels = c("Agree", "Disagree", "Unsure"))
survey
```

## Output

```{r, echo = FALSE}
answers <- c(1, 1, 1, 3, 2)
survey <- factor(x = answers, levels = 1:3,
                 labels = c("Agree", "Disagree", "Unsure"))
survey
```
:::

`r unhide()`
:::
:::

------------------------------------------------------------------------

Creating factors in R is covered in **Section 1.9.3 Factors** of *Probability and Statistics with R*.

## Data frames {#sec-df}

Data frames in R are very similar to matrices. The key difference however is that whilst all elements in a matrix must be of the same "mode" (e.g. numeric, character, logical), each column in a data frame can be of a different mode. If you needed to store a numeric vector, a logical vector and a character vector that all relate to the same subjects for example, then a data frame is the way to do this.

Data frames are a very common type of data structure used within R. Most of the data you will see saved in packages, or the data you will use for fitting statistical models will be saved in a data frame.

To create a data frame, we can use the function `data.frame()`. The only arguments needed are the pre-existing vectors, which all need to be of the same length, that you want to save within the data frame. Some additional arguments include:

-   `stringAsFactor =`: this takes the values `TRUE` or `FALSE` and tells R whether any character vectors should be turned into factors. If this argument is excluded, R takes the default value to be `FALSE`, so character vectors will kept as they are.
-   `row.names =`: this can be a vector of names you wish to use for the rows of the data frame. By default, R will just number the rows starting from 1.

We can create a data frame storing information about students' performance in a course using the following code.

::: panel-tabset
## R Code

```{r df1.1, eval = FALSE}
percentage <- c(84, 76, 90, 53, 6, 67)
grade <- c("A", "A", "A", "C", "H", "B")
pass <- c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE)

performance <- data.frame(percentage, grade, pass)
performance
```

## Output

```{r df1.2, echo = FALSE}
percentage <- c(84, 76, 90, 53, 6, 67)
grade <- c("A", "A", "A", "C", "H", "B")
pass <- c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE)

performance <- data.frame(percentage, grade, pass)
performance
```
:::

We can see that within the data frame `performance`, `percentage` is a numeric vector, `grade` is a character vector and `pass` is a logical vector by using the function `str()`.

::: panel-tabset
## R Code

```{r df2.1, eval = FALSE}
str(performance)
```

## Output

```{r df2.2, echo = FALSE}
str(performance)
```
:::

We could change `grade` to be a factor by adding `stringsAsFactor = TRUE` within the `data.frame()` function. We can also create a vector of students' IDs and use this to name the rows of the data frame in the following code.

::: panel-tabset
## R Code

```{r df3.1, eval = FALSE}
ids <- c("ST002", "ST014", "ST089", "ST060", "ST034", "ST056")

performance <- data.frame(percentage, grade, pass,
                          stringsAsFactors = TRUE, row.names = ids)
performance
```

## Output

```{r df3.2, echo = FALSE}
ids <- c("ST002", "ST014", "ST089", "ST060", "ST034", "ST056")

performance <- data.frame(percentage, grade, pass,
                          stringsAsFactors = TRUE, row.names = ids)
performance
```
:::

Now if we use the `str()` function, we can see that `grade` is treated as a factor.

::: panel-tabset
## R Code

```{r df4.1, eval = FALSE}
str(performance)
```

## Output

```{r df4.2, echo = FALSE}
str(performance)
```
:::

Elements from data frames can be extracted in a couple of ways. For example, we can use square brackets `[ ]`, or we can use the dollar sign operator `$`.

For example, if we wanted to extract just the vector `pass` from the data frame `performance`, we can use any of the following code.

::: panel-tabset
## R Code

```{r df5.1.1, eval = FALSE}
performance[ , "pass"]
```

## Output

```{r df5.1.2, echo = FALSE}
performance[ , "pass"]
```
:::

::: panel-tabset
## R Code

```{r df5.2.1, eval = FALSE}
performance[ , 3]
```

## Output

```{r df5.2.2, echo = FALSE}
performance[ , 3]
```
:::

::: panel-tabset
## R Code

```{r df5.3.1, eval = FALSE}
performance$pass
```

## Output

```{r df5.3.2, echo = FALSE}
performance$pass
```
:::

When we use square brackets, we also need to specify which rows we want to exclude as the first entry (before the comma) within the square brackets. In the code above, we haven't specified any rows, so R shows us all of the rows from `performance`.

::: question
::: question-header
Task
:::

::: question-container
Write code to extract only the percentage and the associated grade for the student with ID `ST014`?

`r hide("Solution")` There are many different ways we could specify the elements we want to extract. Any of the following lines of code will return the same output.

::: panel-tabset
## R Code

```{r dfans1.1, eval = FALSE}
performance["ST014", c("percentage", "grade")]
performance["ST014", c(1, 2)]
performance["ST014", 1:2]
performance["ST014", -3]
performance[2, c("percentage", "grade")]
performance[2, c(1, 2)]
performance[2, 1:2]
performance[2, -3]
```

## Output

```{r dfans1.2, echo = FALSE}
performance["ST014", c("percentage", "grade")]
```
:::

`r unhide()`
:::
:::

An alternative way to easily extract columns from a data frame is to use the `attach()` function. The only argument needed here is the data frame you want to attach to something called the 'search path' in R. This just means that you no longer need to type in the name of the data frame to access its columns.

Before we do this, we are going to run the following code to remove the original vectors we created from the **Environment** tab using the `rm()` function. We do this so that R doesn't just show us these pre-existing vectors directly, but instead looks within the data frame `performance`.

::: panel-tabset
## R Code

```{r df6.1, eval = FALSE}
rm("percentage", "grade", "pass")

attach(performance)
grade
```

## Output

```{r df6.2, echo = FALSE}
rm("percentage", "grade", "pass")

attach(performance)
grade
```
:::

The `attach()` function is useful if you are going to be using the same data frame over and over, but it is good practice to 'detach' it using the `detach()` function once you no longer need the data frame.

::: panel-tabset
## R Code

```{r df7}
detach(performance)
```
:::

When conducting statistical analysis, you won't often need to create your own data frame of information from scratch - it will most likely already exist in some format somewhere! One place where data might be stored is in the packages you can install and load into R.

We have already installed and loaded the package `PASWR2` in [Section @sec-packages]. We can now see a list of the data frames stored in the `PASWR2` package by using the following code.

::: panel-tabset
## R Code

```{r df8, eval=FALSE}
data(package = "PASWR2")
```
:::

We can see more information about the data stored in any of these data sets using the `help()` function. For example, if we wanted to know what the data in the data frame `RAT` related to, we could use the following code.

::: panel-tabset
## R Code

```{r df9, eval=FALSE}
help("RAT")
```
:::

To view an extract of this data frame, we can use the function `head()` and provide as an argument the name of the data frame. This will show us the first 6 rows of a data frame by default.

::: panel-tabset
## R Code

```{r df10.1, eval = FALSE}
head(RAT)
```

## Output

```{r df10.2, echo = FALSE}
head(RAT)
```
:::

To save a data frame from a package in our own **Environment** tab, we use the function `data()`. This will read in the data frame and means we can use it as we would any other data frame that we had created ourselves.

::: panel-tabset
## R Code

```{r df11}
data("RAT")
```
:::

::: question
::: question-header
Task
:::

::: {.question-container .webex-check}
```{r dfans2.1, echo=FALSE}
opts1 <- c(answer="Wait time for the bus", "Wait time at the doctors", "Wait time in line at the bank", "Wait time in the lunch queue")
```

The package `PASWR2` contains a data set called `WAIT`. What do the wait times saved in this data set relate to? `r mcq(opts1)`

`r hide("Solution")` To find out more about what information a data set contains, we can use the `help()` function. Here, running the following code in R tells us that the wait times in `WAIT` are how long a statistician has had to wait for the bus each morning.

::: panel-tabset
## R Code

```{r dfans2.2, eval=FALSE}
help("WAIT")
```
:::

`r unhide()`
:::
:::

::: question
::: question-header
Task
:::

::: question-container
Write code to first view the top 5 rows of the data frame `WAIT` and then load it into your Environment.

`r hide("Solution")` To view the top 5 rows, we use the `head()` function and specify how many rows we want to see using the argument `n = 5`.

::: panel-tabset
## R Code

```{r dfans2.3.1, eval = FALSE}
head(WAIT, n = 5)
```

## Output

```{r dfans2.3.2, echo = FALSE}
head(WAIT, n = 5)
```
:::

To then load the data frame into our **Environment** tab, we use the function `data()`.

::: panel-tabset
## R Code

```{r dfans2.4}
data("WAIT")
```
:::

`r unhide()`
:::
:::

------------------------------------------------------------------------

All of this information is covered with further examples in **Section 1.9.5 Data Frames** of *Probability and Statistics with R*.
